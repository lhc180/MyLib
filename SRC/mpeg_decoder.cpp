/***********************************************************/
// class CMpegDecoder
// MP3デコーダーエンジンに相当するクラス
// メインデータのデコードを行い、PCMサンプルを生成する
//
// ライフタイムはデコードの開始から終了まで
/**********************************************************/
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include "../include/mpeg.h"

static const int BLOCK_LONG = 0;
static const int BLOCK_SHORT = 2;
static const int ERROR_BITOVERRUN = -1;

SScalefactorBandIndex g_ScalefactorBandIndex[3] = //[Frequency Index]
  {
    //fs=32kHz
    {
      // for Long Block
      {0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110
       , 134, 162, 196, 238, 288, 342, 418, 576}, 
      // for Shorts Block
      {0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192}
    },
    //fs=44.1kHz
    {
      // for Long Block
      {0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106
       , 128, 156, 190, 230, 276, 330, 384, 576}, 
      // for Shorts Block
      {0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192}
    },
    //fs=48kHz
    {
      // for Long Block
      {0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126
       , 156, 194, 240, 296, 364, 448, 550, 576}, 
      // for Shorts Block
      {0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192}
    }
  };



CMpegDecoder::CMpegDecoder()
{
  Reset();
}

CMpegDecoder::~CMpegDecoder()
{
}

void CMpegDecoder::Reset()
{
  //ビットストリームオブジェクトのリセット
  m_bs.Reset();

  //ImdctSynthesys用バッファのリセット
  memset( m_fImdctPrevRawout, 0, sizeof(m_fImdctPrevRawout) );

  //SubbandSynthesys用バッファ
  memset( m_fSubbandBuf, 0, sizeof(m_fSubbandBuf) );
  m_nSubbandBufIndex[0] = 0;
  m_nSubbandBufIndex[1] = 0;

}

bool CMpegDecoder::DecodeFrame( const CMpegFrame* pMpegFrame, Int16* pcm, int* pnDataNum )
{
  SScalefactor Scalefactor[2][2];        // [Channel][Granule]
  SSampleMap SampleMap[2][576];        // [Channel][Sample]
  int is[2][576];                        // [Channel][Sample]
  double xr[2][576];                    // [Channel][Sample]
  double pfb[2][576];                    // [Channel][Sample]
  double pfbOut[2][576];                // [Channel][Sample]

  m_nLastError = 0;
  *pnDataNum = 0;
  int nPcmPoint = 0;
  m_pMpegFrame = pMpegFrame;

  // ビットストリームFIFOへメインデータを追加する
  if( !m_bs.PutFrameMainData( m_pMpegFrame->m_pbyteMainData
			      , m_pMpegFrame->GetMainDataSize(), m_pMpegFrame->m_nMainDataBegin ) )
    {
      // MP3ファイルの第1フレームでは必ずFALSEを返すが、それで正常。
      return false;
    }


  for( m_nGranule=0; m_nGranule<2; m_nGranule++ ){
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      // 読み込みビットカウンターをリセットする
      m_bs.ResetDataBitCount();

      //-----------------------------------------------------------
      // スケールファクターのデコード
      //-----------------------------------------------------------
      DecodeScalefactors( Scalefactor );

      //-----------------------------------------------------------
      // ハフマン符号の複合
      //-----------------------------------------------------------
      if( !DecodeHuffmanCode( is[m_nChannel] ) ){
	// MP3ファイルまたはプログラムの不正
	return false;
      }

      // 次のビット読み込み位置へ移動する
      const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];
      m_bs.SeekDataCountBitsPos(pgi->nPart23Length);
    }

    //-----------------------------------------------------------
    // サンプルマップを生成する
    //-----------------------------------------------------------
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      CreateSampleMap( &Scalefactor[m_nChannel][m_nGranule], SampleMap[m_nChannel]);
    }

    //-----------------------------------------------------------
    // 逆量子化処理
    //-----------------------------------------------------------
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      Dequantize( SampleMap[m_nChannel], is[m_nChannel], xr[m_nChannel] );
    }

    //-----------------------------------------------------------
    // 以降の処理のためにショートブロックサンプルを並べ替える
    //-----------------------------------------------------------
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      Reorder( SampleMap[m_nChannel], xr[m_nChannel] );
    }

    //-----------------------------------------------------------
    // ジョイントステレオの復元
    //-----------------------------------------------------------
    JointStereoDecode( &Scalefactor[1][m_nGranule], xr );

    //-----------------------------------------------------------
    // エイリアシング削除処理
    //-----------------------------------------------------------
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      Antialias( xr[m_nChannel] );
    }

    //-----------------------------------------------------------
    // 逆MDCT合成
    //-----------------------------------------------------------
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      ImdctSynthesys( xr[m_nChannel], pfb[m_nChannel] );
    }
    

    //-----------------------------------------------------------
    // サブバンド合成
    //-----------------------------------------------------------
    for( m_nChannel=0; m_nChannel<m_pMpegFrame->GetChannels(); m_nChannel++ ){
      SubbandSynthesys( pfb[m_nChannel], pfbOut[m_nChannel] );
    }
    // // ##Debug
//     for(int i = 0; i < 576; i++){
//       std::cout << "pfb["<<i<<"] = " << pfb[m_nChannel][i] << "\r" << std::flush;
//     }
//     std::cout << std::endl;
//     //## end of Debug
    
    //-----------------------------------------------------------
    // PCM(WAVE)の生成
    //-----------------------------------------------------------
    CreatePcm( pfbOut, pcm+nPcmPoint );

    nPcmPoint += 576 * m_pMpegFrame->GetChannels();
  }
    
  *pnDataNum = nPcmPoint;

  return true;
}

static Int16 g_nSlenTable[2][16] = 
  { { 0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4},
    { 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3} 
  };

void CMpegDecoder::DecodeScalefactors( SScalefactor Scalefactor[2][2] )
{
  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];
  SScalefactor* pScalefactor = &Scalefactor[m_nChannel][m_nGranule];
  memset(pScalefactor, 0, sizeof(SScalefactor));

  int nSlen1 = g_nSlenTable[0][pgi->nScalefacCompress];
  int nSlen2 = g_nSlenTable[1][pgi->nScalefacCompress];

  int sfb, window;
  if( pgi->IsMixedBlock() ){
    ////////////////////////////////////////////////////////
    // Mixed Block
    ////////////////////////////////////////////////////////
    for( sfb=0; sfb<8; sfb++ )
      pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen1);

    for( sfb=3; sfb<6; sfb++ )
      for( window=0; window<3; window++ )
	pScalefactor->nShortBlock[window][sfb] = m_bs.GetBits(nSlen1);
        
    for( sfb=6; sfb<12; sfb++ )
      for( window=0; window<3; window++ )
	pScalefactor->nShortBlock[window][sfb] = m_bs.GetBits(nSlen2);
  }
  else if( pgi->IsShortBlock() ){
    ////////////////////////////////////////////////////////
    // Short Block
    ////////////////////////////////////////////////////////
    for( sfb=0; sfb<6; sfb++ )
      for( window=0; window<3; window++ )
	pScalefactor->nShortBlock[window][sfb] = m_bs.GetBits(nSlen1);

    for( sfb=6; sfb<12; sfb++ )
      for( window=0; window<3; window++ )
	pScalefactor->nShortBlock[window][sfb] = m_bs.GetBits(nSlen2);
  }
  else {
    ////////////////////////////////////////////////////////
    // Long Block
    ////////////////////////////////////////////////////////
    if( m_nGranule==0 ){
      // グラニュール0の場合、必ずビットストリームから取得する
      for( sfb=0; sfb<11; sfb++ )
	pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen1);

      for( ; sfb<21; sfb++ )
	pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen2);
    }
    else{
      // グラニュール1の場合、SCFSI(Scalefactor Selection Index)の値が1なら
      // グラニュール0のスケールファクターを共用する。
      // それ以外ならビットストリームから取得する
      const SScalefactor* psf0 = &Scalefactor[m_nChannel][0]; //グラニュール0
      if( m_pMpegFrame->m_nScfSi[m_nChannel][0] ){
	for( sfb=0; sfb<6; sfb++ )
	  pScalefactor->nLongBlock[sfb] = psf0->nLongBlock[sfb];
      }
      else{
	for( sfb=0; sfb<6; sfb++ )
	  pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen1);
      }

      if( m_pMpegFrame->m_nScfSi[m_nChannel][1] ){
	for( sfb=6; sfb<11; sfb++ )
	  pScalefactor->nLongBlock[sfb] = psf0->nLongBlock[sfb];
      }
      else{
	for( sfb=6; sfb<11; sfb++ )
	  pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen1);
      }
    
      if( m_pMpegFrame->m_nScfSi[m_nChannel][2] ){
	for( sfb=11; sfb<16; sfb++ )
	  pScalefactor->nLongBlock[sfb] = psf0->nLongBlock[sfb];
      }
      else{
	for( sfb=11; sfb<16; sfb++ )
	  pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen2);
      }

      if( m_pMpegFrame->m_nScfSi[m_nChannel][3] ){
	for( sfb=16; sfb<21; sfb++ )
	  pScalefactor->nLongBlock[sfb] = psf0->nLongBlock[sfb];
      }
      else{
	for( sfb=16; sfb<21; sfb++ )
	  pScalefactor->nLongBlock[sfb] = m_bs.GetBits(nSlen2);
      }
    }
  }
}


/*******************************************************/
// ここからは長いハフマン符号のコード
/*******************************************************/

struct SHuffmanTable
{
  Int16   ptr;
  Int16   x, y;
};

struct SHuffmanTableLook
{
  const SHuffmanTable (*pTable)[2];
  int nLinbits;
};

struct SHuffmanTableQuad
{
  Int16   ptr;
  Int16   v, w, x, y;
};

struct SHuffmanTableLookQuad
{
  const SHuffmanTableQuad (*pTable)[2];
};

static const SHuffmanTableQuad g_HuffmanTableA[][2] =
  {
    { { 1, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0 } },
    { { 2, 0, 0, 0, 0 },{ 3, 0, 0, 0, 0 } },
    { { 4, 0, 0, 0, 0 },{ 5, 0, 0, 0, 0 } },
    { { 6, 0, 0, 0, 0 },{ 7, 0, 0, 0, 0 } },
    { { 8, 0, 0, 0, 0 },{ 9, 0, 0, 0, 0 } },
    { { 10, 0, 0, 0, 0 },{ 11, 0, 0, 0, 0 } },
    { { 0, 0, 0, 1, 0 },{ 0, 0, 0, 0, 1 } },
    { { 0, 0, 1, 0, 0 },{ 0, 1, 0, 0, 0 } },
    { { 12, 0, 0, 0, 0 },{ 14, 0, 0, 0, 0 } },
    { { 13, 0, 0, 0, 0 },{ 0, 1, 0, 0, 1 } },
    { { 0, 0, 1, 1, 0 },{ 0, 0, 0, 1, 1 } },
    { { 0, 1, 0, 1, 0 },{ 0, 1, 1, 0, 0 } },
    { { 0, 1, 0, 1, 1 },{ 0, 1, 1, 1, 1 } },
    { { 0, 0, 1, 1, 1 },{ 0, 0, 1, 0, 1 } },
    { { 0, 1, 1, 0, 1 },{ 0, 1, 1, 1, 0 } },
  };

static const SHuffmanTableQuad g_HuffmanTableB[][2] =
  {
    { { 1, 0, 0, 0, 0 },{ 2, 0, 0, 0, 0 } },
    { { 4, 0, 0, 0, 0 },{ 5, 0, 0, 0, 0 } },
    { { 3, 0, 0, 0, 0 },{ 6, 0, 0, 0, 0 } },
    { { 7, 0, 0, 0, 0 },{ 9, 0, 0, 0, 0 } },
    { { 12, 0, 0, 0, 0 },{ 13, 0, 0, 0, 0 } },
    { { 14, 0, 0, 0, 0 },{ 8, 0, 0, 0, 0 } },
    { { 10, 0, 0, 0, 0 },{ 11, 0, 0, 0, 0 } },
    { { 0, 0, 1, 1, 1 },{ 0, 0, 1, 1, 0 } },
    { { 0, 1, 0, 0, 1 },{ 0, 1, 0, 0, 0 } },
    { { 0, 0, 1, 0, 1 },{ 0, 0, 1, 0, 0 } },
    { { 0, 0, 0, 1, 1 },{ 0, 0, 0, 1, 0 } },
    { { 0, 0, 0, 0, 1 },{ 0, 0, 0, 0, 0 } },
    { { 0, 1, 1, 1, 1 },{ 0, 1, 1, 1, 0 } },
    { { 0, 1, 1, 0, 1 },{ 0, 1, 1, 0, 0 } },
    { { 0, 1, 0, 1, 1 },{ 0, 1, 0, 1, 0 } },
  };


static const SHuffmanTableLookQuad TableLookQuad[] =
  {
    {g_HuffmanTableA},
    {g_HuffmanTableB},
  };


static const SHuffmanTable g_HuffmanTable0[][2] =
  {
    { { 0, 0, 0 },{ 0, 0, 0 } },
  };

static const SHuffmanTable g_HuffmanTable1[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 2, 0, 0 },{ 0, 1, 0 } },
    { { 0, 1, 1 },{ 0, 0, 1 } },
  };

static const SHuffmanTable g_HuffmanTable2[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 2, 0, 0 },{ 3, 0, 0 } },
    { { 4, 0, 0 },{ 0, 1, 1 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 5, 0, 0 },{ 6, 0, 0 } },
    { { 7, 0, 0 },{ 0, 1, 2 } },
    { { 0, 2, 1 },{ 0, 2, 0 } },
    { { 0, 2, 2 },{ 0, 0, 2 } },
  };

static const SHuffmanTable g_HuffmanTable3[][2] =
  {
    { { 1, 0, 0 },{ 2, 0, 0 } },
    { { 3, 0, 0 },{ 0, 1, 1 } },
    { { 0, 0, 1 },{ 0, 0, 0 } },
    { { 4, 0, 0 },{ 0, 1, 0 } },
    { { 5, 0, 0 },{ 6, 0, 0 } },
    { { 7, 0, 0 },{ 0, 1, 2 } },
    { { 0, 2, 1 },{ 0, 2, 0 } },
    { { 0, 2, 2 },{ 0, 0, 2 } },
  };

static const SHuffmanTable g_HuffmanTable5[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 2, 0, 0 },{ 3, 0, 0 } },
    { { 4, 0, 0 },{ 0, 1, 1 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 5, 0, 0 },{ 6, 0, 0 } },
    { { 7, 0, 0 },{ 8, 0, 0 } },
    { { 9, 0, 0 },{ 10, 0, 0 } },
    { { 12, 0, 0 },{ 0, 3, 1 } },
    { { 13, 0, 0 },{ 11, 0, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 0, 3, 0 },{ 0, 2, 2 } },
    { { 14, 0, 0 },{ 0, 3, 2 } },
    { { 0, 1, 3 },{ 0, 0, 3 } },
    { { 0, 3, 3 },{ 0, 2, 3 } },
  };

static const SHuffmanTable g_HuffmanTable6[][2] =
  {
    { { 1, 0, 0 },{ 2, 0, 0 } },
    { { 3, 0, 0 },{ 4, 0, 0 } },
    { { 0, 1, 1 },{ 5, 0, 0 } },
    { { 6, 0, 0 },{ 7, 0, 0 } },
    { { 8, 0, 0 },{ 0, 0, 1 } },
    { { 0, 1, 0 },{ 0, 0, 0 } },
    { { 10, 0, 0 },{ 11, 0, 0 } },
    { { 9, 0, 0 },{ 0, 1, 2 } },
    { { 0, 2, 1 },{ 0, 2, 0 } },
    { { 0, 2, 2 },{ 0, 0, 2 } },
    { { 12, 0, 0 },{ 13, 0, 0 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 14, 0, 0 },{ 0, 2, 3 } },
    { { 0, 3, 2 },{ 0, 3, 0 } },
    { { 0, 3, 3 },{ 0, 0, 3 } },
  };

static const SHuffmanTable g_HuffmanTable7[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 3, 0, 0 },{ 2, 0, 0 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 5, 0, 0 },{ 4, 0, 0 } },
    { { 8, 0, 0 },{ 0, 1, 1 } },
    { { 6, 0, 0 },{ 7, 0, 0 } },
    { { 9, 0, 0 },{ 11, 0, 0 } },
    { { 13, 0, 0 },{ 12, 0, 0 } },
    { { 0, 2, 1 },{ 10, 0, 0 } },
    { { 16, 0, 0 },{ 18, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 14, 0, 0 },{ 17, 0, 0 } },
    { { 19, 0, 0 },{ 0, 1, 2 } },
    { { 20, 0, 0 },{ 15, 0, 0 } },
    { { 27, 0, 0 },{ 0, 1, 4 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 24, 0, 0 },{ 21, 0, 0 } },
    { { 0, 4, 1 },{ 0, 4, 0 } },
    { { 23, 0, 0 },{ 25, 0, 0 } },
    { { 0, 3, 0 },{ 0, 2, 2 } },
    { { 26, 0, 0 },{ 22, 0, 0 } },
    { { 29, 0, 0 },{ 0, 1, 5 } },
    { { 0, 3, 2 },{ 0, 0, 3 } },
    { { 0, 5, 1 },{ 30, 0, 0 } },
    { { 32, 0, 0 },{ 31, 0, 0 } },
    { { 0, 5, 0 },{ 28, 0, 0 } },
    { { 0, 0, 4 },{ 0, 2, 3 } },
    { { 0, 2, 4 },{ 0, 4, 2 } },
    { { 0, 4, 3 },{ 0, 3, 3 } },
    { { 0, 2, 5 },{ 0, 5, 2 } },
    { { 0, 0, 5 },{ 0, 3, 4 } },
    { { 0, 3, 5 },{ 0, 4, 4 } },
    { { 33, 0, 0 },{ 34, 0, 0 } },
    { { 0, 5, 5 },{ 0, 4, 5 } },
    { { 0, 5, 4 },{ 0, 5, 3 } },
  };

static const SHuffmanTable g_HuffmanTable8[][2] =
  {
    { { 2, 0, 0 },{ 1, 0, 0 } },
    { { 3, 0, 0 },{ 0, 0, 0 } },
    { { 4, 0, 0 },{ 0, 1, 1 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 6, 0, 0 },{ 5, 0, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 7, 0, 0 },{ 8, 0, 0 } },
    { { 9, 0, 0 },{ 11, 0, 0 } },
    { { 10, 0, 0 },{ 12, 0, 0 } },
    { { 16, 0, 0 },{ 14, 0, 0 } },
    { { 13, 0, 0 },{ 0, 2, 2 } },
    { { 15, 0, 0 },{ 17, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 19, 0, 0 },{ 22, 0, 0 } },
    { { 24, 0, 0 },{ 21, 0, 0 } },
    { { 18, 0, 0 },{ 0, 4, 1 } },
    { { 20, 0, 0 },{ 23, 0, 0 } },
    { { 25, 0, 0 },{ 26, 0, 0 } },
    { { 0, 4, 2 },{ 0, 1, 4 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 31, 0, 0 },{ 29, 0, 0 } },
    { { 28, 0, 0 },{ 0, 2, 4 } },
    { { 0, 0, 3 },{ 0, 3, 0 } },
    { { 27, 0, 0 },{ 0, 1, 5 } },
    { { 0, 5, 1 },{ 30, 0, 0 } },
    { { 0, 0, 4 },{ 0, 4, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 0, 5, 2 },{ 0, 0, 5 } },
    { { 0, 5, 0 },{ 0, 3, 3 } },
    { { 33, 0, 0 },{ 0, 2, 5 } },
    { { 0, 3, 4 },{ 0, 4, 3 } },
    { { 32, 0, 0 },{ 0, 5, 3 } },
    { { 34, 0, 0 },{ 0, 4, 5 } },
    { { 0, 3, 5 },{ 0, 4, 4 } },
    { { 0, 5, 5 },{ 0, 5, 4 } },
  };

static const SHuffmanTable g_HuffmanTable9[][2] =
  {
    { { 1, 0, 0 },{ 2, 0, 0 } },
    { { 5, 0, 0 },{ 3, 0, 0 } },
    { { 4, 0, 0 },{ 6, 0, 0 } },
    { { 8, 0, 0 },{ 7, 0, 0 } },
    { { 0, 1, 1 },{ 0, 0, 1 } },
    { { 9, 0, 0 },{ 10, 0, 0 } },
    { { 0, 1, 0 },{ 0, 0, 0 } },
    { { 0, 2, 1 },{ 0, 2, 0 } },
    { { 11, 0, 0 },{ 0, 1, 2 } },
    { { 14, 0, 0 },{ 15, 0, 0 } },
    { { 13, 0, 0 },{ 12, 0, 0 } },
    { { 0, 2, 2 },{ 0, 0, 2 } },
    { { 0, 3, 1 },{ 17, 0, 0 } },
    { { 16, 0, 0 },{ 0, 1, 3 } },
    { { 20, 0, 0 },{ 19, 0, 0 } },
    { { 18, 0, 0 },{ 21, 0, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 0, 0, 3 },{ 0, 3, 0 } },
    { { 27, 0, 0 },{ 25, 0, 0 } },
    { { 24, 0, 0 },{ 22, 0, 0 } },
    { { 26, 0, 0 },{ 23, 0, 0 } },
    { { 0, 1, 4 },{ 0, 4, 1 } },
    { { 0, 4, 3 },{ 29, 0, 0 } },
    { { 30, 0, 0 },{ 28, 0, 0 } },
    { { 0, 5, 1 },{ 0, 3, 4 } },
    { { 0, 3, 3 },{ 0, 4, 0 } },
    { { 32, 0, 0 },{ 31, 0, 0 } },
    { { 0, 2, 4 },{ 0, 4, 2 } },
    { { 0, 5, 2 },{ 0, 1, 5 } },
    { { 0, 5, 0 },{ 0, 0, 4 } },
    { { 0, 4, 4 },{ 0, 2, 5 } },
    { { 0, 5, 3 },{ 34, 0, 0 } },
    { { 33, 0, 0 },{ 0, 3, 5 } },
    { { 0, 5, 5 },{ 0, 4, 5 } },
    { { 0, 5, 4 },{ 0, 0, 5 } },
  };

static const SHuffmanTable g_HuffmanTable10[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 3, 0, 0 },{ 2, 0, 0 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 5, 0, 0 },{ 4, 0, 0 } },
    { { 6, 0, 0 },{ 0, 1, 1 } },
    { { 7, 0, 0 },{ 8, 0, 0 } },
    { { 11, 0, 0 },{ 10, 0, 0 } },
    { { 9, 0, 0 },{ 12, 0, 0 } },
    { { 13, 0, 0 },{ 14, 0, 0 } },
    { { 18, 0, 0 },{ 21, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 17, 0, 0 },{ 15, 0, 0 } },
    { { 16, 0, 0 },{ 22, 0, 0 } },
    { { 19, 0, 0 },{ 20, 0, 0 } },
    { { 31, 0, 0 },{ 24, 0, 0 } },
    { { 23, 0, 0 },{ 33, 0, 0 } },
    { { 34, 0, 0 },{ 29, 0, 0 } },
    { { 27, 0, 0 },{ 30, 0, 0 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 0, 3, 0 },{ 0, 2, 2 } },
    { { 26, 0, 0 },{ 28, 0, 0 } },
    { { 32, 0, 0 },{ 25, 0, 0 } },
    { { 36, 0, 0 },{ 41, 0, 0 } },
    { { 0, 6, 0 },{ 47, 0, 0 } },
    { { 0, 3, 2 },{ 0, 0, 3 } },
    { { 44, 0, 0 },{ 35, 0, 0 } },
    { { 46, 0, 0 },{ 38, 0, 0 } },
    { { 45, 0, 0 },{ 0, 1, 7 } },
    { { 39, 0, 0 },{ 40, 0, 0 } },
    { { 42, 0, 0 },{ 43, 0, 0 } },
    { { 0, 1, 6 },{ 0, 6, 1 } },
    { { 0, 4, 0 },{ 0, 2, 3 } },
    { { 0, 1, 4 },{ 0, 4, 1 } },
    { { 0, 7, 1 },{ 37, 0, 0 } },
    { { 0, 6, 2 },{ 54, 0, 0 } },
    { { 0, 2, 4 },{ 0, 4, 2 } },
    { { 0, 3, 6 },{ 0, 2, 6 } },
    { { 55, 0, 0 },{ 56, 0, 0 } },
    { { 48, 0, 0 },{ 0, 1, 5 } },
    { { 0, 5, 1 },{ 50, 0, 0 } },
    { { 0, 3, 3 },{ 0, 0, 4 } },
    { { 51, 0, 0 },{ 57, 0, 0 } },
    { { 0, 2, 7 },{ 0, 7, 2 } },
    { { 52, 0, 0 },{ 0, 7, 0 } },
    { { 0, 0, 6 },{ 49, 0, 0 } },
    { { 53, 0, 0 },{ 58, 0, 0 } },
    { { 0, 0, 5 },{ 0, 5, 0 } },
    { { 0, 2, 5 },{ 0, 5, 2 } },
    { { 0, 5, 3 },{ 0, 4, 4 } },
    { { 0, 3, 4 },{ 0, 4, 3 } },
    { { 0, 7, 3 },{ 0, 4, 6 } },
    { { 0, 6, 4 },{ 0, 0, 7 } },
    { { 59, 0, 0 },{ 60, 0, 0 } },
    { { 0, 4, 5 },{ 0, 3, 5 } },
    { { 0, 7, 4 },{ 0, 5, 6 } },
    { { 0, 6, 5 },{ 0, 3, 7 } },
    { { 61, 0, 0 },{ 0, 6, 3 } },
    { { 62, 0, 0 },{ 0, 4, 7 } },
    { { 0, 7, 7 },{ 0, 6, 7 } },
    { { 0, 7, 6 },{ 0, 5, 7 } },
    { { 0, 5, 5 },{ 0, 5, 4 } },
    { { 0, 7, 5 },{ 0, 6, 6 } },
  };

static const SHuffmanTable g_HuffmanTable11[][2] =
  {
    { { 1, 0, 0 },{ 2, 0, 0 } },
    { { 5, 0, 0 },{ 3, 0, 0 } },
    { { 4, 0, 0 },{ 0, 0, 0 } },
    { { 6, 0, 0 },{ 0, 1, 1 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 8, 0, 0 },{ 7, 0, 0 } },
    { { 0, 1, 2 },{ 12, 0, 0 } },
    { { 10, 0, 0 },{ 9, 0, 0 } },
    { { 13, 0, 0 },{ 11, 0, 0 } },
    { { 14, 0, 0 },{ 0, 2, 1 } },
    { { 15, 0, 0 },{ 17, 0, 0 } },
    { { 19, 0, 0 },{ 20, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 18, 0, 0 },{ 16, 0, 0 } },
    { { 21, 0, 0 },{ 0, 2, 2 } },
    { { 30, 0, 0 },{ 24, 0, 0 } },
    { { 26, 0, 0 },{ 31, 0, 0 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 25, 0, 0 },{ 28, 0, 0 } },
    { { 27, 0, 0 },{ 22, 0, 0 } },
    { { 29, 0, 0 },{ 23, 0, 0 } },
    { { 0, 0, 3 },{ 0, 3, 0 } },
    { { 41, 0, 0 },{ 0, 1, 6 } },
    { { 35, 0, 0 },{ 32, 0, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 34, 0, 0 },{ 38, 0, 0 } },
    { { 0, 7, 1 },{ 45, 0, 0 } },
    { { 36, 0, 0 },{ 0, 6, 2 } },
    { { 43, 0, 0 },{ 39, 0, 0 } },
    { { 0, 6, 1 },{ 42, 0, 0 } },
    { { 33, 0, 0 },{ 44, 0, 0 } },
    { { 40, 0, 0 },{ 37, 0, 0 } },
    { { 0, 2, 4 },{ 0, 4, 2 } },
    { { 0, 1, 4 },{ 0, 4, 1 } },
    { { 53, 0, 0 },{ 52, 0, 0 } },
    { { 0, 5, 0 },{ 49, 0, 0 } },
    { { 51, 0, 0 },{ 0, 1, 5 } },
    { { 0, 6, 0 },{ 48, 0, 0 } },
    { { 50, 0, 0 },{ 47, 0, 0 } },
    { { 0, 7, 2 },{ 46, 0, 0 } },
    { { 0, 3, 6 },{ 0, 6, 3 } },
    { { 0, 2, 6 },{ 0, 0, 6 } },
    { { 0, 5, 1 },{ 0, 3, 4 } },
    { { 54, 0, 0 },{ 0, 2, 7 } },
    { { 0, 0, 4 },{ 0, 4, 0 } },
    { { 0, 1, 7 },{ 0, 7, 0 } },
    { { 0, 6, 4 },{ 0, 0, 7 } },
    { { 0, 7, 3 },{ 0, 4, 6 } },
    { { 0, 4, 4 },{ 0, 2, 5 } },
    { { 0, 4, 3 },{ 0, 3, 3 } },
    { { 58, 0, 0 },{ 0, 3, 7 } },
    { { 0, 5, 2 },{ 0, 0, 5 } },
    { { 60, 0, 0 },{ 57, 0, 0 } },
    { { 55, 0, 0 },{ 59, 0, 0 } },
    { { 56, 0, 0 },{ 61, 0, 0 } },
    { { 0, 7, 7 },{ 0, 6, 7 } },
    { { 0, 4, 5 },{ 0, 5, 4 } },
    { { 0, 7, 4 },{ 62, 0, 0 } },
    { { 0, 5, 6 },{ 0, 6, 5 } },
    { { 0, 7, 6 },{ 0, 7, 5 } },
    { { 0, 6, 6 },{ 0, 4, 7 } },
    { { 0, 3, 5 },{ 0, 5, 3 } },
    { { 0, 5, 7 },{ 0, 5, 5 } },
  };

static const SHuffmanTable g_HuffmanTable12[][2] =
  {
    { { 2, 0, 0 },{ 1, 0, 0 } },
    { { 5, 0, 0 },{ 6, 0, 0 } },
    { { 4, 0, 0 },{ 3, 0, 0 } },
    { { 8, 0, 0 },{ 10, 0, 0 } },
    { { 9, 0, 0 },{ 7, 0, 0 } },
    { { 11, 0, 0 },{ 0, 1, 1 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 12, 0, 0 },{ 17, 0, 0 } },
    { { 14, 0, 0 },{ 13, 0, 0 } },
    { { 15, 0, 0 },{ 18, 0, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 16, 0, 0 },{ 0, 0, 0 } },
    { { 26, 0, 0 },{ 19, 0, 0 } },
    { { 0, 3, 1 },{ 0, 2, 2 } },
    { { 23, 0, 0 },{ 0, 1, 3 } },
    { { 24, 0, 0 },{ 27, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 20, 0, 0 },{ 22, 0, 0 } },
    { { 25, 0, 0 },{ 21, 0, 0 } },
    { { 35, 0, 0 },{ 34, 0, 0 } },
    { { 0, 3, 3 },{ 0, 4, 1 } },
    { { 32, 0, 0 },{ 33, 0, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 37, 0, 0 },{ 0, 3, 0 } },
    { { 39, 0, 0 },{ 30, 0, 0 } },
    { { 28, 0, 0 },{ 38, 0, 0 } },
    { { 29, 0, 0 },{ 31, 0, 0 } },
    { { 36, 0, 0 },{ 40, 0, 0 } },
    { { 44, 0, 0 },{ 41, 0, 0 } },
    { { 0, 1, 5 },{ 0, 5, 1 } },
    { { 51, 0, 0 },{ 49, 0, 0 } },
    { { 0, 3, 4 },{ 0, 4, 3 } },
    { { 0, 6, 1 },{ 48, 0, 0 } },
    { { 46, 0, 0 },{ 53, 0, 0 } },
    { { 0, 4, 2 },{ 0, 1, 4 } },
    { { 47, 0, 0 },{ 0, 2, 4 } },
    { { 43, 0, 0 },{ 50, 0, 0 } },
    { { 0, 4, 0 },{ 0, 0, 3 } },
    { { 0, 2, 6 },{ 0, 6, 2 } },
    { { 52, 0, 0 },{ 54, 0, 0 } },
    { { 42, 0, 0 },{ 45, 0, 0 } },
    { { 0, 4, 4 },{ 59, 0, 0 } },
    { { 0, 7, 1 },{ 60, 0, 0 } },
    { { 0, 7, 2 },{ 0, 4, 6 } },
    { { 0, 4, 5 },{ 0, 5, 4 } },
    { { 0, 3, 6 },{ 0, 6, 3 } },
    { { 0, 3, 5 },{ 0, 5, 3 } },
    { { 0, 5, 0 },{ 0, 0, 4 } },
    { { 0, 1, 6 },{ 0, 6, 0 } },
    { { 57, 0, 0 },{ 0, 2, 7 } },
    { { 0, 6, 4 },{ 0, 1, 7 } },
    { { 0, 5, 6 },{ 0, 3, 7 } },
    { { 61, 0, 0 },{ 56, 0, 0 } },
    { { 0, 2, 5 },{ 0, 5, 2 } },
    { { 58, 0, 0 },{ 55, 0, 0 } },
    { { 0, 7, 4 },{ 0, 6, 5 } },
    { { 0, 5, 7 },{ 0, 7, 5 } },
    { { 0, 7, 3 },{ 0, 5, 5 } },
    { { 0, 6, 6 },{ 0, 4, 7 } },
    { { 0, 0, 6 },{ 0, 0, 5 } },
    { { 0, 0, 7 },{ 0, 7, 0 } },
    { { 62, 0, 0 },{ 0, 7, 6 } },
    { { 0, 7, 7 },{ 0, 6, 7 } },
  };

static const SHuffmanTable g_HuffmanTable13[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 2, 0, 0 },{ 3, 0, 0 } },
    { { 6, 0, 0 },{ 4, 0, 0 } },
    { { 5, 0, 0 },{ 0, 1, 0 } },
    { { 10, 0, 0 },{ 9, 0, 0 } },
    { { 0, 1, 1 },{ 0, 0, 1 } },
    { { 7, 0, 0 },{ 8, 0, 0 } },
    { { 14, 0, 0 },{ 12, 0, 0 } },
    { { 13, 0, 0 },{ 11, 0, 0 } },
    { { 17, 0, 0 },{ 15, 0, 0 } },
    { { 16, 0, 0 },{ 18, 0, 0 } },
    { { 26, 0, 0 },{ 19, 0, 0 } },
    { { 23, 0, 0 },{ 25, 0, 0 } },
    { { 21, 0, 0 },{ 24, 0, 0 } },
    { { 20, 0, 0 },{ 22, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 30, 0, 0 },{ 28, 0, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 27, 0, 0 },{ 29, 0, 0 } },
    { { 40, 0, 0 },{ 47, 0, 0 } },
    { { 39, 0, 0 },{ 43, 0, 0 } },
    { { 34, 0, 0 },{ 45, 0, 0 } },
    { { 37, 0, 0 },{ 44, 0, 0 } },
    { { 48, 0, 0 },{ 32, 0, 0 } },
    { { 33, 0, 0 },{ 46, 0, 0 } },
    { { 36, 0, 0 },{ 35, 0, 0 } },
    { { 38, 0, 0 },{ 31, 0, 0 } },
    { { 0, 3, 1 },{ 0, 0, 3 } },
    { { 41, 0, 0 },{ 0, 1, 3 } },
    { { 0, 3, 0 },{ 0, 2, 2 } },
    { { 0, 4, 1 },{ 42, 0, 0 } },
    { { 0, 1, 5 },{ 0, 5, 1 } },
    { { 52, 0, 0 },{ 59, 0, 0 } },
    { { 0, 8, 1 },{ 70, 0, 0 } },
    { { 57, 0, 0 },{ 53, 0, 0 } },
    { { 63, 0, 0 },{ 62, 0, 0 } },
    { { 56, 0, 0 },{ 58, 0, 0 } },
    { { 61, 0, 0 },{ 64, 0, 0 } },
    { { 67, 0, 0 },{ 73, 0, 0 } },
    { { 76, 0, 0 },{ 54, 0, 0 } },
    { { 69, 0, 0 },{ 51, 0, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 0, 0, 4 },{ 0, 4, 0 } },
    { { 60, 0, 0 },{ 49, 0, 0 } },
    { { 66, 0, 0 },{ 72, 0, 0 } },
    { { 55, 0, 0 },{ 75, 0, 0 } },
    { { 65, 0, 0 },{ 68, 0, 0 } },
    { { 50, 0, 0 },{ 0, 1, 4 } },
    { { 71, 0, 0 },{ 74, 0, 0 } },
    { { 88, 0, 0 },{ 95, 0, 0 } },
    { { 0, 4, 2 },{ 0, 3, 3 } },
    { { 0, 5, 0 },{ 0, 2, 4 } },
    { { 105, 0, 0 },{ 106, 0, 0 } },
    { { 0, 7, 1 },{ 90, 0, 0 } },
    { { 81, 0, 0 },{ 85, 0, 0 } },
    { { 103, 0, 0 },{ 108, 0, 0 } },
    { { 0, 1, 9 },{ 0, 9, 1 } },
    { { 87, 0, 0 },{ 0, 1, 7 } },
    { { 109, 0, 0 },{ 102, 0, 0 } },
    { { 86, 0, 0 },{ 91, 0, 0 } },
    { { 78, 0, 0 },{ 77, 0, 0 } },
    { { 93, 0, 0 },{ 101, 0, 0 } },
    { { 0, 8, 2 },{ 0, 1, 8 } },
    { { 83, 0, 0 },{ 0, 2, 8 } },
    { { 100, 0, 0 },{ 110, 0, 0 } },
    { { 0, 1, 6 },{ 0, 6, 1 } },
    { { 107, 0, 0 },{ 97, 0, 0 } },
    { { 96, 0, 0 },{ 0, 2, 5 } },
    { { 0, 0, 6 },{ 0, 6, 0 } },
    { { 0, 3, 4 },{ 0, 4, 3 } },
    { { 0, 0, 8 },{ 0, 8, 0 } },
    { { 82, 0, 0 },{ 94, 0, 0 } },
    { { 99, 0, 0 },{ 98, 0, 0 } },
    { { 0, 5, 2 },{ 0, 0, 5 } },
    { { 92, 0, 0 },{ 80, 0, 0 } },
    { { 79, 0, 0 },{ 84, 0, 0 } },
    { { 89, 0, 0 },{ 104, 0, 0 } },
    { { 128, 0, 0 },{ 134, 0, 0 } },
    { { 130, 0, 0 },{ 138, 0, 0 } },
    { { 0, 5, 4 },{ 0, 2, 6 } },
    { { 135, 0, 0 },{ 140, 0, 0 } },
    { { 127, 0, 0 },{ 142, 0, 0 } },
    { { 0, 1, 10 },{ 0, 10, 1 } },
    { { 0, 7, 2 },{ 143, 0, 0 } },
    { { 0, 6, 2 },{ 0, 3, 5 } },
    { { 120, 0, 0 },{ 131, 0, 0 } },
    { { 0, 8, 3 },{ 133, 0, 0 } },
    { { 0, 3, 7 },{ 0, 2, 7 } },
    { { 111, 0, 0 },{ 117, 0, 0 } },
    { { 144, 0, 0 },{ 116, 0, 0 } },
    { { 0, 5, 5 },{ 0, 0, 7 } },
    { { 115, 0, 0 },{ 124, 0, 0 } },
    { { 139, 0, 0 },{ 0, 9, 3 } },
    { { 136, 0, 0 },{ 145, 0, 0 } },
    { { 113, 0, 0 },{ 0, 10, 0 } },
    { { 126, 0, 0 },{ 121, 0, 0 } },
    { { 0, 5, 3 },{ 0, 4, 4 } },
    { { 146, 0, 0 },{ 132, 0, 0 } },
    { { 0, 2, 10 },{ 0, 10, 2 } },
    { { 137, 0, 0 },{ 112, 0, 0 } },
    { { 141, 0, 0 },{ 129, 0, 0 } },
    { { 118, 0, 0 },{ 125, 0, 0 } },
    { { 0, 4, 8 },{ 0, 8, 4 } },
    { { 0, 7, 0 },{ 0, 3, 6 } },
    { { 122, 0, 0 },{ 123, 0, 0 } },
    { { 0, 2, 9 },{ 0, 9, 2 } },
    { { 119, 0, 0 },{ 0, 3, 8 } },
    { { 0, 1, 11 },{ 0, 11, 1 } },
    { { 0, 6, 3 },{ 0, 4, 5 } },
    { { 0, 0, 9 },{ 0, 9, 0 } },
    { { 114, 0, 0 },{ 0, 11, 2 } },
    { { 168, 0, 0 },{ 179, 0, 0 } },
    { { 0, 5, 9 },{ 0, 9, 5 } },
    { { 0, 0, 10 },{ 0, 6, 8 } },
    { { 0, 9, 4 },{ 167, 0, 0 } },
    { { 0, 7, 4 },{ 0, 5, 6 } },
    { { 175, 0, 0 },{ 163, 0, 0 } },
    { { 0, 3, 12 },{ 0, 2, 12 } },
    { { 156, 0, 0 },{ 0, 3, 11 } },
    { { 0, 5, 7 },{ 0, 7, 5 } },
    { { 160, 0, 0 },{ 165, 0, 0 } },
    { { 152, 0, 0 },{ 0, 1, 12 } },
    { { 162, 0, 0 },{ 177, 0, 0 } },
    { { 166, 0, 0 },{ 176, 0, 0 } },
    { { 0, 6, 5 },{ 0, 7, 3 } },
    { { 0, 11, 3 },{ 171, 0, 0 } },
    { { 0, 12, 2 },{ 0, 5, 11 } },
    { { 174, 0, 0 },{ 158, 0, 0 } },
    { { 155, 0, 0 },{ 0, 13, 1 } },
    { { 0, 10, 4 },{ 151, 0, 0 } },
    { { 173, 0, 0 },{ 154, 0, 0 } },
    { { 149, 0, 0 },{ 172, 0, 0 } },
    { { 0, 9, 6 },{ 0, 4, 10 } },
    { { 0, 6, 6 },{ 0, 4, 7 } },
    { { 157, 0, 0 },{ 170, 0, 0 } },
    { { 0, 3, 9 },{ 0, 5, 8 } },
    { { 0, 12, 1 },{ 164, 0, 0 } },
    { { 0, 3, 10 },{ 0, 10, 3 } },
    { { 150, 0, 0 },{ 147, 0, 0 } },
    { { 0, 8, 6 },{ 0, 4, 9 } },
    { { 0, 8, 5 },{ 0, 6, 7 } },
    { { 0, 2, 11 },{ 159, 0, 0 } },
    { { 148, 0, 0 },{ 178, 0, 0 } },
    { { 0, 4, 6 },{ 0, 6, 4 } },
    { { 161, 0, 0 },{ 153, 0, 0 } },
    { { 0, 12, 0 },{ 169, 0, 0 } },
    { { 0, 0, 11 },{ 0, 11, 0 } },
    { { 198, 0, 0 },{ 0, 12, 3 } },
    { { 0, 14, 2 },{ 201, 0, 0 } },
    { { 200, 0, 0 },{ 207, 0, 0 } },
    { { 0, 11, 7 },{ 189, 0, 0 } },
    { { 0, 7, 8 },{ 0, 8, 7 } },
    { { 0, 11, 5 },{ 0, 8, 9 } },
    { { 188, 0, 0 },{ 202, 0, 0 } },
    { { 0, 13, 2 },{ 0, 1, 13 } },
    { { 199, 0, 0 },{ 0, 4, 11 } },
    { { 0, 10, 6 },{ 0, 7, 9 } },
    { { 0, 0, 13 },{ 0, 13, 0 } },
    { { 206, 0, 0 },{ 192, 0, 0 } },
    { { 0, 10, 5 },{ 0, 6, 9 } },
    { { 182, 0, 0 },{ 185, 0, 0 } },
    { { 203, 0, 0 },{ 190, 0, 0 } },
    { { 183, 0, 0 },{ 187, 0, 0 } },
    { { 181, 0, 0 },{ 184, 0, 0 } },
    { { 0, 9, 8 },{ 0, 0, 12 } },
    { { 191, 0, 0 },{ 194, 0, 0 } },
    { { 205, 0, 0 },{ 196, 0, 0 } },
    { { 0, 7, 7 },{ 0, 7, 6 } },
    { { 0, 4, 12 },{ 0, 12, 4 } },
    { { 0, 11, 4 },{ 0, 6, 10 } },
    { { 0, 8, 10 },{ 0, 10, 8 } },
    { { 0, 8, 8 },{ 0, 5, 10 } },
    { { 0, 12, 6 },{ 0, 3, 13 } },
    { { 186, 0, 0 },{ 0, 2, 13 } },
    { { 0, 15, 0 },{ 204, 0, 0 } },
    { { 197, 0, 0 },{ 180, 0, 0 } },
    { { 0, 1, 15 },{ 0, 15, 1 } },
    { { 193, 0, 0 },{ 195, 0, 0 } },
    { { 0, 1, 14 },{ 0, 14, 1 } },
    { { 0, 6, 11 },{ 0, 11, 6 } },
    { { 215, 0, 0 },{ 211, 0, 0 } },
    { { 225, 0, 0 },{ 213, 0, 0 } },
    { { 0, 14, 0 },{ 0, 5, 13 } },
    { { 0, 2, 15 },{ 0, 15, 2 } },
    { { 0, 3, 15 },{ 217, 0, 0 } },
    { { 0, 13, 5 },{ 0, 7, 12 } },
    { { 0, 13, 3 },{ 0, 7, 11 } },
    { { 219, 0, 0 },{ 0, 0, 15 } },
    { { 210, 0, 0 },{ 214, 0, 0 } },
    { { 0, 5, 12 },{ 0, 12, 5 } },
    { { 216, 0, 0 },{ 221, 0, 0 } },
    { { 0, 12, 7 },{ 0, 4, 13 } },
    { { 0, 6, 13 },{ 0, 14, 3 } },
    { { 212, 0, 0 },{ 0, 10, 11 } },
    { { 0, 8, 11 },{ 0, 11, 8 } },
    { { 220, 0, 0 },{ 0, 4, 14 } },
    { { 0, 11, 9 },{ 222, 0, 0 } },
    { { 226, 0, 0 },{ 224, 0, 0 } },
    { { 0, 9, 9 },{ 0, 7, 10 } },
    { { 0, 10, 7 },{ 0, 9, 7 } },
    { { 0, 13, 4 },{ 0, 9, 10 } },
    { { 0, 2, 14 },{ 0, 0, 14 } },
    { { 209, 0, 0 },{ 227, 0, 0 } },
    { { 223, 0, 0 },{ 218, 0, 0 } },
    { { 0, 11, 10 },{ 0, 14, 5 } },
    { { 208, 0, 0 },{ 0, 3, 14 } },
    { { 0, 14, 4 },{ 0, 8, 12 } },
    { { 0, 10, 9 },{ 0, 6, 12 } },
    { { 0, 12, 8 },{ 0, 13, 6 } },
    { { 0, 13, 10 },{ 235, 0, 0 } },
    { { 232, 0, 0 },{ 240, 0, 0 } },
    { { 0, 10, 12 },{ 0, 11, 11 } },
    { { 0, 12, 9 },{ 0, 5, 14 } },
    { { 230, 0, 0 },{ 0, 15, 3 } },
    { { 228, 0, 0 },{ 0, 15, 7 } },
    { { 0, 15, 5 },{ 0, 14, 7 } },
    { { 239, 0, 0 },{ 231, 0, 0 } },
    { { 0, 8, 13 },{ 0, 13, 8 } },
    { { 229, 0, 0 },{ 237, 0, 0 } },
    { { 0, 6, 14 },{ 0, 9, 12 } },
    { { 0, 7, 13 },{ 0, 13, 7 } },
    { { 241, 0, 0 },{ 233, 0, 0 } },
    { { 0, 9, 11 },{ 0, 10, 10 } },
    { { 238, 0, 0 },{ 236, 0, 0 } },
    { { 0, 9, 13 },{ 0, 13, 9 } },
    { { 0, 4, 15 },{ 0, 15, 4 } },
    { { 0, 14, 8 },{ 0, 5, 15 } },
    { { 234, 0, 0 },{ 0, 6, 15 } },
    { { 0, 8, 14 },{ 246, 0, 0 } },
    { { 243, 0, 0 },{ 247, 0, 0 } },
    { { 0, 12, 10 },{ 0, 14, 6 } },
    { { 0, 14, 11 },{ 0, 9, 15 } },
    { { 0, 8, 15 },{ 0, 15, 8 } },
    { { 0, 11, 13 },{ 0, 13, 11 } },
    { { 0, 12, 11 },{ 0, 15, 6 } },
    { { 0, 10, 13 },{ 0, 11, 12 } },
    { { 249, 0, 0 },{ 244, 0, 0 } },
    { { 0, 14, 12 },{ 0, 13, 13 } },
    { { 248, 0, 0 },{ 245, 0, 0 } },
    { { 242, 0, 0 },{ 0, 11, 14 } },
    { { 0, 12, 12 },{ 250, 0, 0 } },
    { { 0, 15, 9 },{ 0, 14, 10 } },
    { { 0, 15, 10 },{ 0, 12, 13 } },
    { { 0, 15, 11 },{ 0, 12, 14 } },
    { { 0, 13, 14 },{ 0, 11, 15 } },
    { { 0, 14, 15 },{ 0, 13, 15 } },
    { { 0, 7, 15 },{ 0, 7, 14 } },
    { { 0, 13, 12 },{ 251, 0, 0 } },
    { { 252, 0, 0 },{ 0, 15, 15 } },
    { { 0, 14, 14 },{ 0, 12, 15 } },
    { { 0, 10, 14 },{ 0, 9, 14 } },
    { { 0, 10, 15 },{ 0, 14, 9 } },
    { { 253, 0, 0 },{ 0, 14, 13 } },
    { { 254, 0, 0 },{ 0, 15, 13 } },
    { { 0, 15, 14 },{ 0, 15, 12 } },
  };

static const SHuffmanTable g_HuffmanTable15[][2] =
  {
    { { 2, 0, 0 },{ 1, 0, 0 } },
    { { 4, 0, 0 },{ 6, 0, 0 } },
    { { 3, 0, 0 },{ 5, 0, 0 } },
    { { 8, 0, 0 },{ 12, 0, 0 } },
    { { 10, 0, 0 },{ 0, 1, 1 } },
    { { 9, 0, 0 },{ 7, 0, 0 } },
    { { 11, 0, 0 },{ 0, 0, 0 } },
    { { 20, 0, 0 },{ 18, 0, 0 } },
    { { 15, 0, 0 },{ 13, 0, 0 } },
    { { 22, 0, 0 },{ 16, 0, 0 } },
    { { 17, 0, 0 },{ 21, 0, 0 } },
    { { 0, 0, 1 },{ 0, 1, 0 } },
    { { 19, 0, 0 },{ 14, 0, 0 } },
    { { 26, 0, 0 },{ 31, 0, 0 } },
    { { 29, 0, 0 },{ 33, 0, 0 } },
    { { 30, 0, 0 },{ 35, 0, 0 } },
    { { 37, 0, 0 },{ 24, 0, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 36, 0, 0 },{ 0, 2, 2 } },
    { { 27, 0, 0 },{ 32, 0, 0 } },
    { { 23, 0, 0 },{ 34, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 28, 0, 0 },{ 25, 0, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 0, 4, 1 },{ 52, 0, 0 } },
    { { 53, 0, 0 },{ 48, 0, 0 } },
    { { 40, 0, 0 },{ 43, 0, 0 } },
    { { 54, 0, 0 },{ 59, 0, 0 } },
    { { 49, 0, 0 },{ 38, 0, 0 } },
    { { 61, 0, 0 },{ 58, 0, 0 } },
    { { 39, 0, 0 },{ 60, 0, 0 } },
    { { 51, 0, 0 },{ 55, 0, 0 } },
    { { 57, 0, 0 },{ 56, 0, 0 } },
    { { 47, 0, 0 },{ 45, 0, 0 } },
    { { 42, 0, 0 },{ 0, 1, 3 } },
    { { 50, 0, 0 },{ 46, 0, 0 } },
    { { 0, 3, 1 },{ 0, 3, 0 } },
    { { 44, 0, 0 },{ 41, 0, 0 } },
    { { 0, 2, 5 },{ 0, 5, 2 } },
    { { 94, 0, 0 },{ 66, 0, 0 } },
    { { 88, 0, 0 },{ 68, 0, 0 } },
    { { 0, 4, 2 },{ 0, 3, 3 } },
    { { 0, 4, 0 },{ 0, 0, 3 } },
    { { 78, 0, 0 },{ 76, 0, 0 } },
    { { 0, 4, 3 },{ 0, 2, 4 } },
    { { 81, 0, 0 },{ 62, 0, 0 } },
    { { 80, 0, 0 },{ 85, 0, 0 } },
    { { 87, 0, 0 },{ 72, 0, 0 } },
    { { 77, 0, 0 },{ 0, 3, 4 } },
    { { 0, 6, 1 },{ 64, 0, 0 } },
    { { 67, 0, 0 },{ 71, 0, 0 } },
    { { 86, 0, 0 },{ 91, 0, 0 } },
    { { 0, 1, 4 },{ 0, 0, 4 } },
    { { 0, 1, 5 },{ 0, 5, 1 } },
    { { 83, 0, 0 },{ 95, 0, 0 } },
    { { 75, 0, 0 },{ 89, 0, 0 } },
    { { 70, 0, 0 },{ 65, 0, 0 } },
    { { 79, 0, 0 },{ 82, 0, 0 } },
    { { 73, 0, 0 },{ 90, 0, 0 } },
    { { 93, 0, 0 },{ 69, 0, 0 } },
    { { 74, 0, 0 },{ 92, 0, 0 } },
    { { 63, 0, 0 },{ 84, 0, 0 } },
    { { 135, 0, 0 },{ 0, 3, 5 } },
    { { 0, 2, 7 },{ 0, 7, 2 } },
    { { 0, 5, 3 },{ 0, 4, 4 } },
    { { 137, 0, 0 },{ 97, 0, 0 } },
    { { 121, 0, 0 },{ 125, 0, 0 } },
    { { 100, 0, 0 },{ 103, 0, 0 } },
    { { 119, 0, 0 },{ 122, 0, 0 } },
    { { 109, 0, 0 },{ 112, 0, 0 } },
    { { 129, 0, 0 },{ 133, 0, 0 } },
    { { 105, 0, 0 },{ 108, 0, 0 } },
    { { 0, 5, 4 },{ 0, 2, 6 } },
    { { 0, 5, 5 },{ 0, 7, 1 } },
    { { 130, 0, 0 },{ 134, 0, 0 } },
    { { 111, 0, 0 },{ 116, 0, 0 } },
    { { 136, 0, 0 },{ 96, 0, 0 } },
    { { 0, 0, 5 },{ 0, 5, 0 } },
    { { 128, 0, 0 },{ 132, 0, 0 } },
    { { 0, 2, 8 },{ 0, 8, 2 } },
    { { 115, 0, 0 },{ 118, 0, 0 } },
    { { 0, 6, 2 },{ 0, 1, 6 } },
    { { 0, 1, 8 },{ 0, 8, 1 } },
    { { 127, 0, 0 },{ 131, 0, 0 } },
    { { 0, 6, 4 },{ 0, 1, 7 } },
    { { 123, 0, 0 },{ 126, 0, 0 } },
    { { 139, 0, 0 },{ 102, 0, 0 } },
    { { 0, 6, 3 },{ 0, 4, 5 } },
    { { 110, 0, 0 },{ 114, 0, 0 } },
    { { 120, 0, 0 },{ 124, 0, 0 } },
    { { 107, 0, 0 },{ 0, 3, 6 } },
    { { 99, 0, 0 },{ 106, 0, 0 } },
    { { 138, 0, 0 },{ 101, 0, 0 } },
    { { 104, 0, 0 },{ 98, 0, 0 } },
    { { 113, 0, 0 },{ 117, 0, 0 } },
    { { 0, 9, 1 },{ 140, 0, 0 } },
    { { 183, 0, 0 },{ 0, 10, 3 } },
    { { 0, 7, 3 },{ 0, 4, 6 } },
    { { 0, 5, 7 },{ 0, 7, 5 } },
    { { 0, 1, 10 },{ 0, 10, 1 } },
    { { 154, 0, 0 },{ 175, 0, 0 } },
    { { 169, 0, 0 },{ 167, 0, 0 } },
    { { 0, 2, 10 },{ 0, 10, 2 } },
    { { 184, 0, 0 },{ 172, 0, 0 } },
    { { 0, 4, 8 },{ 0, 8, 4 } },
    { { 171, 0, 0 },{ 181, 0, 0 } },
    { { 144, 0, 0 },{ 0, 6, 8 } },
    { { 0, 0, 7 },{ 0, 7, 0 } },
    { { 182, 0, 0 },{ 155, 0, 0 } },
    { { 0, 3, 8 },{ 0, 8, 3 } },
    { { 142, 0, 0 },{ 177, 0, 0 } },
    { { 0, 8, 6 },{ 0, 4, 9 } },
    { { 0, 6, 6 },{ 0, 4, 7 } },
    { { 185, 0, 0 },{ 158, 0, 0 } },
    { { 180, 0, 0 },{ 153, 0, 0 } },
    { { 152, 0, 0 },{ 164, 0, 0 } },
    { { 0, 9, 4 },{ 0, 3, 9 } },
    { { 174, 0, 0 },{ 150, 0, 0 } },
    { { 145, 0, 0 },{ 143, 0, 0 } },
    { { 179, 0, 0 },{ 0, 11, 3 } },
    { { 0, 9, 3 },{ 170, 0, 0 } },
    { { 162, 0, 0 },{ 165, 0, 0 } },
    { { 157, 0, 0 },{ 146, 0, 0 } },
    { { 149, 0, 0 },{ 163, 0, 0 } },
    { { 0, 5, 8 },{ 0, 8, 5 } },
    { { 147, 0, 0 },{ 161, 0, 0 } },
    { { 0, 12, 2 },{ 160, 0, 0 } },
    { { 0, 2, 9 },{ 0, 6, 7 } },
    { { 0, 11, 2 },{ 168, 0, 0 } },
    { { 0, 7, 4 },{ 0, 0, 8 } },
    { { 159, 0, 0 },{ 176, 0, 0 } },
    { { 0, 7, 6 },{ 0, 9, 2 } },
    { { 0, 11, 1 },{ 166, 0, 0 } },
    { { 0, 8, 0 },{ 0, 5, 6 } },
    { { 141, 0, 0 },{ 148, 0, 0 } },
    { { 0, 0, 6 },{ 0, 6, 0 } },
    { { 178, 0, 0 },{ 151, 0, 0 } },
    { { 0, 6, 5 },{ 0, 3, 7 } },
    { { 173, 0, 0 },{ 156, 0, 0 } },
    { { 0, 5, 9 },{ 0, 9, 5 } },
    { { 0, 1, 9 },{ 0, 9, 0 } },
    { { 199, 0, 0 },{ 198, 0, 0 } },
    { { 0, 11, 5 },{ 0, 1, 12 } },
    { { 0, 3, 12 },{ 0, 12, 3 } },
    { { 0, 0, 10 },{ 0, 10, 0 } },
    { { 0, 11, 6 },{ 217, 0, 0 } },
    { { 0, 2, 11 },{ 0, 5, 10 } },
    { { 222, 0, 0 },{ 191, 0, 0 } },
    { { 200, 0, 0 },{ 203, 0, 0 } },
    { { 0, 7, 10 },{ 0, 10, 7 } },
    { { 213, 0, 0 },{ 208, 0, 0 } },
    { { 0, 10, 4 },{ 0, 7, 8 } },
    { { 0, 10, 8 },{ 0, 4, 12 } },
    { { 0, 11, 4 },{ 0, 6, 10 } },
    { { 205, 0, 0 },{ 194, 0, 0 } },
    { { 0, 12, 5 },{ 0, 8, 10 } },
    { { 225, 0, 0 },{ 189, 0, 0 } },
    { { 0, 9, 7 },{ 0, 8, 8 } },
    { { 202, 0, 0 },{ 211, 0, 0 } },
    { { 218, 0, 0 },{ 186, 0, 0 } },
    { { 0, 2, 12 },{ 0, 5, 11 } },
    { { 195, 0, 0 },{ 204, 0, 0 } },
    { { 226, 0, 0 },{ 214, 0, 0 } },
    { { 0, 10, 6 },{ 206, 0, 0 } },
    { { 0, 12, 4 },{ 0, 6, 11 } },
    { { 187, 0, 0 },{ 223, 0, 0 } },
    { { 0, 11, 0 },{ 0, 6, 9 } },
    { { 188, 0, 0 },{ 190, 0, 0 } },
    { { 0, 10, 5 },{ 0, 1, 11 } },
    { { 212, 0, 0 },{ 210, 0, 0 } },
    { { 0, 7, 7 },{ 0, 0, 9 } },
    { { 215, 0, 0 },{ 0, 1, 13 } },
    { { 0, 13, 3 },{ 0, 13, 2 } },
    { { 219, 0, 0 },{ 209, 0, 0 } },
    { { 192, 0, 0 },{ 207, 0, 0 } },
    { { 0, 13, 4 },{ 221, 0, 0 } },
    { { 193, 0, 0 },{ 196, 0, 0 } },
    { { 0, 8, 9 },{ 0, 9, 8 } },
    { { 0, 9, 6 },{ 0, 4, 10 } },
    { { 0, 3, 11 },{ 0, 7, 9 } },
    { { 0, 12, 1 },{ 0, 4, 11 } },
    { { 0, 7, 11 },{ 0, 11, 7 } },
    { { 0, 13, 1 },{ 201, 0, 0 } },
    { { 0, 8, 7 },{ 0, 3, 10 } },
    { { 216, 0, 0 },{ 224, 0, 0 } },
    { { 220, 0, 0 },{ 197, 0, 0 } },
    { { 0, 15, 2 },{ 233, 0, 0 } },
    { { 0, 15, 5 },{ 0, 7, 14 } },
    { { 0, 14, 1 },{ 231, 0, 0 } },
    { { 0, 9, 11 },{ 0, 11, 9 } },
    { { 0, 5, 13 },{ 0, 13, 5 } },
    { { 241, 0, 0 },{ 0, 4, 15 } },
    { { 240, 0, 0 },{ 238, 0, 0 } },
    { { 0, 1, 15 },{ 0, 15, 1 } },
    { { 0, 4, 13 },{ 0, 8, 11 } },
    { { 0, 15, 4 },{ 0, 3, 15 } },
    { { 0, 9, 12 },{ 0, 12, 9 } },
    { { 246, 0, 0 },{ 239, 0, 0 } },
    { { 0, 11, 10 },{ 0, 14, 5 } },
    { { 0, 5, 14 },{ 0, 10, 11 } },
    { { 0, 7, 13 },{ 0, 13, 7 } },
    { { 0, 5, 12 },{ 0, 13, 0 } },
    { { 234, 0, 0 },{ 247, 0, 0 } },
    { { 0, 4, 14 },{ 0, 14, 4 } },
    { { 0, 15, 3 },{ 0, 13, 8 } },
    { { 0, 7, 12 },{ 0, 12, 7 } },
    { { 0, 12, 0 },{ 0, 0, 11 } },
    { { 230, 0, 0 },{ 227, 0, 0 } },
    { { 236, 0, 0 },{ 244, 0, 0 } },
    { { 0, 3, 14 },{ 0, 6, 13 } },
    { { 0, 14, 2 },{ 0, 1, 14 } },
    { { 229, 0, 0 },{ 242, 0, 0 } },
    { { 0, 2, 14 },{ 0, 10, 10 } },
    { { 228, 0, 0 },{ 243, 0, 0 } },
    { { 237, 0, 0 },{ 235, 0, 0 } },
    { { 0, 2, 13 },{ 0, 0, 13 } },
    { { 0, 10, 9 },{ 0, 6, 12 } },
    { { 0, 9, 9 },{ 0, 0, 12 } },
    { { 0, 14, 6 },{ 0, 2, 15 } },
    { { 0, 8, 12 },{ 0, 12, 8 } },
    { { 232, 0, 0 },{ 245, 0, 0 } },
    { { 0, 11, 8 },{ 0, 9, 10 } },
    { { 0, 12, 10 },{ 0, 11, 11 } },
    { { 0, 14, 7 },{ 0, 10, 12 } },
    { { 0, 12, 6 },{ 0, 3, 13 } },
    { { 0, 13, 6 },{ 0, 14, 3 } },
    { { 0, 12, 11 },{ 0, 15, 6 } },
    { { 0, 12, 12 },{ 0, 9, 14 } },
    { { 0, 14, 9 },{ 0, 7, 15 } },
    { { 0, 14, 11 },{ 0, 12, 13 } },
    { { 0, 8, 15 },{ 0, 15, 8 } },
    { { 0, 0, 14 },{ 0, 14, 0 } },
    { { 251, 0, 0 },{ 252, 0, 0 } },
    { { 0, 6, 14 },{ 0, 15, 0 } },
    { { 0, 13, 13 },{ 0, 10, 15 } },
    { { 0, 5, 15 },{ 0, 9, 13 } },
    { { 0, 13, 10 },{ 0, 11, 12 } },
    { { 0, 8, 14 },{ 0, 14, 8 } },
    { { 0, 11, 13 },{ 0, 13, 11 } },
    { { 0, 15, 11 },{ 254, 0, 0 } },
    { { 0, 15, 9 },{ 0, 14, 10 } },
    { { 0, 13, 9 },{ 0, 8, 13 } },
    { { 0, 13, 12 },{ 0, 9, 15 } },
    { { 0, 15, 7 },{ 0, 10, 13 } },
    { { 0, 6, 15 },{ 253, 0, 0 } },
    { { 0, 14, 14 },{ 249, 0, 0 } },
    { { 248, 0, 0 },{ 250, 0, 0 } },
    { { 0, 15, 10 },{ 0, 11, 14 } },
    { { 0, 15, 12 },{ 0, 13, 14 } },
    { { 0, 15, 13 },{ 0, 12, 15 } },
    { { 0, 14, 13 },{ 0, 11, 15 } },
    { { 0, 15, 15 },{ 0, 14, 15 } },
    { { 0, 15, 14 },{ 0, 13, 15 } },
    { { 0, 10, 14 },{ 0, 0, 15 } },
    { { 0, 12, 14 },{ 0, 14, 12 } },
  };

static const SHuffmanTable g_HuffmanTable16[][2] =
  {
    { { 1, 0, 0 },{ 0, 0, 0 } },
    { { 3, 0, 0 },{ 2, 0, 0 } },
    { { 5, 0, 0 },{ 0, 1, 0 } },
    { { 4, 0, 0 },{ 6, 0, 0 } },
    { { 10, 0, 0 },{ 9, 0, 0 } },
    { { 0, 1, 1 },{ 0, 0, 1 } },
    { { 8, 0, 0 },{ 7, 0, 0 } },
    { { 18, 0, 0 },{ 11, 0, 0 } },
    { { 17, 0, 0 },{ 12, 0, 0 } },
    { { 15, 0, 0 },{ 13, 0, 0 } },
    { { 14, 0, 0 },{ 16, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 24, 0, 0 },{ 26, 0, 0 } },
    { { 21, 0, 0 },{ 23, 0, 0 } },
    { { 27, 0, 0 },{ 22, 0, 0 } },
    { { 20, 0, 0 },{ 25, 0, 0 } },
    { { 19, 0, 0 },{ 30, 0, 0 } },
    { { 29, 0, 0 },{ 28, 0, 0 } },
    { { 0, 1, 2 },{ 0, 2, 1 } },
    { { 34, 0, 0 },{ 35, 0, 0 } },
    { { 36, 0, 0 },{ 48, 0, 0 } },
    { { 47, 0, 0 },{ 31, 0, 0 } },
    { { 43, 0, 0 },{ 51, 0, 0 } },
    { { 50, 0, 0 },{ 33, 0, 0 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 46, 0, 0 },{ 39, 0, 0 } },
    { { 38, 0, 0 },{ 0, 2, 2 } },
    { { 41, 0, 0 },{ 42, 0, 0 } },
    { { 45, 0, 0 },{ 32, 0, 0 } },
    { { 44, 0, 0 },{ 49, 0, 0 } },
    { { 40, 0, 0 },{ 37, 0, 0 } },
    { { 54, 0, 0 },{ 61, 0, 0 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 0, 5, 1 },{ 69, 0, 0 } },
    { { 78, 0, 0 },{ 0, 1, 15 } },
    { { 0, 15, 1 },{ 70, 0, 0 } },
    { { 62, 0, 0 },{ 80, 0, 0 } },
    { { 66, 0, 0 },{ 58, 0, 0 } },
    { { 0, 0, 3 },{ 0, 3, 0 } },
    { { 74, 0, 0 },{ 77, 0, 0 } },
    { { 82, 0, 0 },{ 68, 0, 0 } },
    { { 55, 0, 0 },{ 57, 0, 0 } },
    { { 81, 0, 0 },{ 0, 15, 15 } },
    { { 60, 0, 0 },{ 72, 0, 0 } },
    { { 52, 0, 0 },{ 59, 0, 0 } },
    { { 0, 4, 1 },{ 53, 0, 0 } },
    { { 63, 0, 0 },{ 64, 0, 0 } },
    { { 76, 0, 0 },{ 79, 0, 0 } },
    { { 67, 0, 0 },{ 56, 0, 0 } },
    { { 73, 0, 0 },{ 0, 1, 4 } },
    { { 71, 0, 0 },{ 65, 0, 0 } },
    { { 75, 0, 0 },{ 0, 15, 2 } },
    { { 0, 3, 4 },{ 0, 4, 3 } },
    { { 0, 0, 4 },{ 0, 4, 0 } },
    { { 0, 6, 2 },{ 0, 1, 6 } },
    { { 86, 0, 0 },{ 103, 0, 0 } },
    { { 98, 0, 0 },{ 115, 0, 0 } },
    { { 95, 0, 0 },{ 87, 0, 0 } },
    { { 83, 0, 0 },{ 119, 0, 0 } },
    { { 0, 5, 0 },{ 0, 2, 4 } },
    { { 104, 0, 0 },{ 0, 4, 15 } },
    { { 0, 6, 1 },{ 105, 0, 0 } },
    { { 109, 0, 0 },{ 101, 0, 0 } },
    { { 110, 0, 0 },{ 113, 0, 0 } },
    { { 107, 0, 0 },{ 90, 0, 0 } },
    { { 0, 2, 5 },{ 0, 5, 2 } },
    { { 116, 0, 0 },{ 111, 0, 0 } },
    { { 112, 0, 0 },{ 117, 0, 0 } },
    { { 118, 0, 0 },{ 91, 0, 0 } },
    { { 0, 1, 5 },{ 0, 0, 5 } },
    { { 94, 0, 0 },{ 102, 0, 0 } },
    { { 0, 5, 3 },{ 108, 0, 0 } },
    { { 0, 15, 4 },{ 0, 15, 3 } },
    { { 0, 4, 2 },{ 0, 3, 3 } },
    { { 88, 0, 0 },{ 92, 0, 0 } },
    { { 0, 15, 0 },{ 114, 0, 0 } },
    { { 0, 7, 1 },{ 85, 0, 0 } },
    { { 97, 0, 0 },{ 0, 1, 7 } },
    { { 0, 2, 15 },{ 0, 0, 15 } },
    { { 89, 0, 0 },{ 96, 0, 0 } },
    { { 93, 0, 0 },{ 100, 0, 0 } },
    { { 120, 0, 0 },{ 84, 0, 0 } },
    { { 99, 0, 0 },{ 106, 0, 0 } },
    { { 130, 0, 0 },{ 137, 0, 0 } },
    { { 0, 6, 15 },{ 0, 15, 6 } },
    { { 0, 7, 0 },{ 0, 3, 6 } },
    { { 122, 0, 0 },{ 125, 0, 0 } },
    { { 138, 0, 0 },{ 0, 8, 15 } },
    { { 0, 7, 3 },{ 147, 0, 0 } },
    { { 0, 6, 3 },{ 0, 4, 5 } },
    { { 136, 0, 0 },{ 0, 3, 7 } },
    { { 150, 0, 0 },{ 156, 0, 0 } },
    { { 0, 2, 7 },{ 0, 7, 2 } },
    { { 0, 1, 10 },{ 135, 0, 0 } },
    { { 140, 0, 0 },{ 145, 0, 0 } },
    { { 0, 10, 15 },{ 159, 0, 0 } },
    { { 0, 5, 4 },{ 0, 2, 6 } },
    { { 157, 0, 0 },{ 0, 0, 7 } },
    { { 0, 9, 1 },{ 146, 0, 0 } },
    { { 132, 0, 0 },{ 151, 0, 0 } },
    { { 149, 0, 0 },{ 143, 0, 0 } },
    { { 158, 0, 0 },{ 0, 10, 2 } },
    { { 129, 0, 0 },{ 142, 0, 0 } },
    { { 133, 0, 0 },{ 126, 0, 0 } },
    { { 0, 5, 15 },{ 0, 15, 5 } },
    { { 0, 0, 6 },{ 0, 6, 0 } },
    { { 121, 0, 0 },{ 128, 0, 0 } },
    { { 0, 8, 1 },{ 0, 8, 0 } },
    { { 0, 3, 5 },{ 0, 4, 4 } },
    { { 162, 0, 0 },{ 141, 0, 0 } },
    { { 154, 0, 0 },{ 0, 8, 2 } },
    { { 127, 0, 0 },{ 131, 0, 0 } },
    { { 0, 2, 9 },{ 0, 9, 2 } },
    { { 152, 0, 0 },{ 0, 1, 8 } },
    { { 0, 3, 15 },{ 144, 0, 0 } },
    { { 160, 0, 0 },{ 124, 0, 0 } },
    { { 153, 0, 0 },{ 161, 0, 0 } },
    { { 139, 0, 0 },{ 0, 1, 9 } },
    { { 148, 0, 0 },{ 155, 0, 0 } },
    { { 123, 0, 0 },{ 134, 0, 0 } },
    { { 0, 7, 15 },{ 0, 15, 7 } },
    { { 169, 0, 0 },{ 181, 0, 0 } },
    { { 0, 14, 15 },{ 0, 15, 14 } },
    { { 173, 0, 0 },{ 0, 10, 3 } },
    { { 0, 3, 8 },{ 0, 8, 3 } },
    { { 0, 13, 15 },{ 0, 15, 13 } },
    { { 0, 11, 15 },{ 0, 15, 11 } },
    { { 195, 0, 0 },{ 0, 2, 11 } },
    { { 0, 14, 2 },{ 175, 0, 0 } },
    { { 180, 0, 0 },{ 168, 0, 0 } },
    { { 0, 11, 1 },{ 174, 0, 0 } },
    { { 0, 11, 2 },{ 0, 1, 11 } },
    { { 165, 0, 0 },{ 167, 0, 0 } },
    { { 0, 12, 15 },{ 0, 15, 12 } },
    { { 184, 0, 0 },{ 0, 2, 10 } },
    { { 0, 0, 10 },{ 0, 10, 0 } },
    { { 0, 0, 8 },{ 0, 5, 6 } },
    { { 193, 0, 0 },{ 176, 0, 0 } },
    { { 0, 15, 9 },{ 0, 15, 8 } },
    { { 0, 7, 6 },{ 0, 0, 9 } },
    { { 178, 0, 0 },{ 191, 0, 0 } },
    { { 166, 0, 0 },{ 0, 9, 4 } },
    { { 187, 0, 0 },{ 163, 0, 0 } },
    { { 0, 5, 8 },{ 0, 8, 5 } },
    { { 164, 0, 0 },{ 192, 0, 0 } },
    { { 182, 0, 0 },{ 190, 0, 0 } },
    { { 0, 9, 0 },{ 0, 4, 8 } },
    { { 0, 6, 5 },{ 0, 4, 6 } },
    { { 183, 0, 0 },{ 170, 0, 0 } },
    { { 0, 3, 9 },{ 0, 9, 3 } },
    { { 171, 0, 0 },{ 194, 0, 0 } },
    { { 196, 0, 0 },{ 179, 0, 0 } },
    { { 0, 4, 7 },{ 0, 7, 4 } },
    { { 186, 0, 0 },{ 172, 0, 0 } },
    { { 0, 6, 6 },{ 0, 2, 8 } },
    { { 189, 0, 0 },{ 0, 1, 13 } },
    { { 0, 2, 12 },{ 185, 0, 0 } },
    { { 0, 6, 4 },{ 0, 5, 5 } },
    { { 197, 0, 0 },{ 0, 6, 7 } },
    { { 0, 15, 10 },{ 0, 9, 15 } },
    { { 0, 8, 4 },{ 0, 7, 5 } },
    { { 177, 0, 0 },{ 0, 11, 3 } },
    { { 188, 0, 0 },{ 0, 10, 1 } },
    { { 198, 0, 0 },{ 205, 0, 0 } },
    { { 208, 0, 0 },{ 200, 0, 0 } },
    { { 199, 0, 0 },{ 206, 0, 0 } },
    { { 0, 8, 6 },{ 0, 7, 7 } },
    { { 217, 0, 0 },{ 0, 0, 13 } },
    { { 215, 0, 0 },{ 0, 14, 3 } },
    { { 224, 0, 0 },{ 0, 1, 12 } },
    { { 0, 13, 2 },{ 0, 13, 1 } },
    { { 0, 12, 4 },{ 0, 6, 11 } },
    { { 0, 4, 11 },{ 0, 11, 4 } },
    { { 0, 7, 8 },{ 0, 8, 7 } },
    { { 0, 0, 11 },{ 0, 11, 0 } },
    { { 0, 2, 14 },{ 0, 1, 14 } },
    { { 0, 4, 10 },{ 0, 10, 4 } },
    { { 0, 6, 10 },{ 0, 10, 6 } },
    { { 216, 0, 0 },{ 221, 0, 0 } },
    { { 219, 0, 0 },{ 0, 3, 12 } },
    { { 201, 0, 0 },{ 220, 0, 0 } },
    { { 0, 12, 0 },{ 209, 0, 0 } },
    { { 207, 0, 0 },{ 210, 0, 0 } },
    { { 0, 13, 3 },{ 0, 2, 13 } },
    { { 0, 3, 10 },{ 0, 5, 9 } },
    { { 0, 12, 2 },{ 0, 11, 5 } },
    { { 0, 12, 1 },{ 0, 0, 12 } },
    { { 218, 0, 0 },{ 222, 0, 0 } },
    { { 0, 9, 5 },{ 0, 6, 8 } },
    { { 0, 3, 11 },{ 212, 0, 0 } },
    { { 211, 0, 0 },{ 203, 0, 0 } },
    { { 225, 0, 0 },{ 202, 0, 0 } },
    { { 204, 0, 0 },{ 214, 0, 0 } },
    { { 0, 6, 9 },{ 0, 9, 6 } },
    { { 0, 12, 3 },{ 0, 10, 7 } },
    { { 0, 5, 10 },{ 0, 10, 5 } },
    { { 223, 0, 0 },{ 213, 0, 0 } },
    { { 0, 4, 9 },{ 0, 5, 7 } },
    { { 0, 7, 12 },{ 0, 12, 7 } },
    { { 0, 9, 10 },{ 0, 6, 12 } },
    { { 235, 0, 0 },{ 231, 0, 0 } },
    { { 228, 0, 0 },{ 0, 14, 1 } },
    { { 0, 14, 6 },{ 0, 9, 12 } },
    { { 0, 6, 13 },{ 227, 0, 0 } },
    { { 233, 0, 0 },{ 241, 0, 0 } },
    { { 0, 4, 13 },{ 0, 8, 11 } },
    { { 0, 12, 6 },{ 0, 3, 13 } },
    { { 238, 0, 0 },{ 240, 0, 0 } },
    { { 234, 0, 0 },{ 226, 0, 0 } },
    { { 0, 9, 8 },{ 0, 7, 9 } },
    { { 0, 4, 14 },{ 239, 0, 0 } },
    { { 0, 12, 8 },{ 0, 3, 14 } },
    { { 0, 9, 7 },{ 0, 8, 8 } },
    { { 0, 9, 9 },{ 0, 4, 12 } },
    { { 229, 0, 0 },{ 0, 11, 13 } },
    { { 0, 7, 11 },{ 243, 0, 0 } },
    { { 0, 9, 14 },{ 230, 0, 0 } },
    { { 0, 5, 12 },{ 0, 12, 5 } },
    { { 0, 0, 14 },{ 0, 14, 0 } },
    { { 0, 11, 6 },{ 0, 7, 10 } },
    { { 0, 13, 4 },{ 236, 0, 0 } },
    { { 237, 0, 0 },{ 232, 0, 0 } },
    { { 0, 5, 13 },{ 0, 13, 5 } },
    { { 0, 8, 10 },{ 0, 10, 8 } },
    { { 0, 5, 11 },{ 0, 8, 9 } },
    { { 244, 0, 0 },{ 242, 0, 0 } },
    { { 0, 14, 14 },{ 249, 0, 0 } },
    { { 0, 13, 6 },{ 0, 9, 11 } },
    { { 0, 11, 9 },{ 0, 10, 10 } },
    { { 246, 0, 0 },{ 0, 5, 14 } },
    { { 0, 11, 12 },{ 0, 12, 11 } },
    { { 247, 0, 0 },{ 0, 10, 14 } },
    { { 0, 9, 13 },{ 0, 14, 7 } },
    { { 0, 12, 12 },{ 245, 0, 0 } },
    { { 251, 0, 0 },{ 250, 0, 0 } },
    { { 0, 11, 14 },{ 0, 12, 13 } },
    { { 0, 11, 8 },{ 0, 10, 9 } },
    { { 0, 8, 14 },{ 0, 14, 8 } },
    { { 0, 10, 11 },{ 0, 11, 10 } },
    { { 0, 14, 4 },{ 0, 8, 12 } },
    { { 0, 14, 5 },{ 0, 13, 7 } },
    { { 248, 0, 0 },{ 0, 12, 10 } },
    { { 0, 13, 8 },{ 0, 6, 14 } },
    { { 0, 11, 7 },{ 0, 13, 0 } },
    { { 0, 11, 11 },{ 0, 8, 13 } },
    { { 0, 10, 13 },{ 0, 13, 10 } },
    { { 0, 12, 9 },{ 0, 7, 13 } },
    { { 0, 13, 12 },{ 0, 13, 11 } },
    { { 0, 7, 14 },{ 0, 10, 12 } },
    { { 0, 14, 13 },{ 0, 14, 11 } },
    { { 0, 14, 9 },{ 253, 0, 0 } },
    { { 252, 0, 0 },{ 0, 13, 14 } },
    { { 0, 12, 14 },{ 254, 0, 0 } },
    { { 0, 14, 10 },{ 0, 13, 9 } },
    { { 0, 14, 12 },{ 0, 13, 13 } },
  };

static const SHuffmanTable g_HuffmanTable24[][2] =
  {
    { { 1, 0, 0 },{ 2, 0, 0 } },
    { { 4, 0, 0 },{ 5, 0, 0 } },
    { { 3, 0, 0 },{ 6, 0, 0 } },
    { { 10, 0, 0 },{ 7, 0, 0 } },
    { { 8, 0, 0 },{ 13, 0, 0 } },
    { { 11, 0, 0 },{ 14, 0, 0 } },
    { { 12, 0, 0 },{ 9, 0, 0 } },
    { { 25, 0, 0 },{ 20, 0, 0 } },
    { { 19, 0, 0 },{ 21, 0, 0 } },
    { { 0, 1, 0 },{ 0, 0, 0 } },
    { { 22, 0, 0 },{ 15, 0, 0 } },
    { { 18, 0, 0 },{ 17, 0, 0 } },
    { { 0, 1, 1 },{ 0, 0, 1 } },
    { { 24, 0, 0 },{ 0, 15, 15 } },
    { { 16, 0, 0 },{ 23, 0, 0 } },
    { { 38, 0, 0 },{ 42, 0, 0 } },
    { { 28, 0, 0 },{ 34, 0, 0 } },
    { { 45, 0, 0 },{ 26, 0, 0 } },
    { { 39, 0, 0 },{ 30, 0, 0 } },
    { { 41, 0, 0 },{ 29, 0, 0 } },
    { { 0, 2, 1 },{ 31, 0, 0 } },
    { { 44, 0, 0 },{ 32, 0, 0 } },
    { { 43, 0, 0 },{ 27, 0, 0 } },
    { { 40, 0, 0 },{ 37, 0, 0 } },
    { { 33, 0, 0 },{ 36, 0, 0 } },
    { { 35, 0, 0 },{ 0, 1, 2 } },
    { { 46, 0, 0 },{ 66, 0, 0 } },
    { { 79, 0, 0 },{ 63, 0, 0 } },
    { { 60, 0, 0 },{ 77, 0, 0 } },
    { { 53, 0, 0 },{ 62, 0, 0 } },
    { { 51, 0, 0 },{ 56, 0, 0 } },
    { { 0, 0, 2 },{ 0, 2, 0 } },
    { { 57, 0, 0 },{ 75, 0, 0 } },
    { { 73, 0, 0 },{ 54, 0, 0 } },
    { { 69, 0, 0 },{ 71, 0, 0 } },
    { { 76, 0, 0 },{ 0, 2, 2 } },
    { { 70, 0, 0 },{ 72, 0, 0 } },
    { { 52, 0, 0 },{ 59, 0, 0 } },
    { { 58, 0, 0 },{ 68, 0, 0 } },
    { { 74, 0, 0 },{ 47, 0, 0 } },
    { { 78, 0, 0 },{ 48, 0, 0 } },
    { { 80, 0, 0 },{ 49, 0, 0 } },
    { { 0, 1, 3 },{ 0, 3, 1 } },
    { { 64, 0, 0 },{ 55, 0, 0 } },
    { { 50, 0, 0 },{ 67, 0, 0 } },
    { { 65, 0, 0 },{ 61, 0, 0 } },
    { { 85, 0, 0 },{ 108, 0, 0 } },
    { { 125, 0, 0 },{ 112, 0, 0 } },
    { { 124, 0, 0 },{ 97, 0, 0 } },
    { { 104, 0, 0 },{ 117, 0, 0 } },
    { { 86, 0, 0 },{ 0, 15, 7 } },
    { { 101, 0, 0 },{ 110, 0, 0 } },
    { { 93, 0, 0 },{ 123, 0, 0 } },
    { { 0, 15, 10 },{ 103, 0, 0 } },
    { { 0, 2, 15 },{ 0, 15, 2 } },
    { { 0, 5, 1 },{ 94, 0, 0 } },
    { { 87, 0, 0 },{ 100, 0, 0 } },
    { { 0, 5, 15 },{ 0, 15, 5 } },
    { { 0, 4, 1 },{ 96, 0, 0 } },
    { { 84, 0, 0 },{ 113, 0, 0 } },
    { { 116, 0, 0 },{ 88, 0, 0 } },
    { { 106, 0, 0 },{ 98, 0, 0 } },
    { { 0, 15, 9 },{ 0, 15, 8 } },
    { { 0, 3, 3 },{ 0, 1, 4 } },
    { { 107, 0, 0 },{ 121, 0, 0 } },
    { { 99, 0, 0 },{ 109, 0, 0 } },
    { { 119, 0, 0 },{ 81, 0, 0 } },
    { { 0, 6, 15 },{ 0, 15, 6 } },
    { { 0, 2, 3 },{ 0, 3, 2 } },
    { { 95, 0, 0 },{ 105, 0, 0 } },
    { { 0, 15, 1 },{ 115, 0, 0 } },
    { { 82, 0, 0 },{ 90, 0, 0 } },
    { { 122, 0, 0 },{ 111, 0, 0 } },
    { { 0, 3, 15 },{ 0, 15, 3 } },
    { { 91, 0, 0 },{ 118, 0, 0 } },
    { { 0, 4, 15 },{ 0, 15, 4 } },
    { { 0, 0, 3 },{ 0, 3, 0 } },
    { { 92, 0, 0 },{ 120, 0, 0 } },
    { { 89, 0, 0 },{ 102, 0, 0 } },
    { { 0, 2, 4 },{ 0, 4, 2 } },
    { { 114, 0, 0 },{ 83, 0, 0 } },
    { { 149, 0, 0 },{ 154, 0, 0 } },
    { { 160, 0, 0 },{ 0, 7, 3 } },
    { { 0, 13, 15 },{ 0, 15, 13 } },
    { { 157, 0, 0 },{ 0, 3, 5 } },
    { { 162, 0, 0 },{ 168, 0, 0 } },
    { { 0, 8, 15 },{ 0, 7, 15 } },
    { { 129, 0, 0 },{ 141, 0, 0 } },
    { { 169, 0, 0 },{ 163, 0, 0 } },
    { { 0, 4, 6 },{ 0, 6, 4 } },
    { { 177, 0, 0 },{ 0, 7, 2 } },
    { { 126, 0, 0 },{ 139, 0, 0 } },
    { { 172, 0, 0 },{ 175, 0, 0 } },
    { { 0, 2, 6 },{ 0, 6, 2 } },
    { { 0, 3, 4 },{ 0, 4, 3 } },
    { { 140, 0, 0 },{ 132, 0, 0 } },
    { { 0, 0, 4 },{ 0, 4, 0 } },
    { { 0, 4, 5 },{ 0, 5, 4 } },
    { { 170, 0, 0 },{ 164, 0, 0 } },
    { { 138, 0, 0 },{ 128, 0, 0 } },
    { { 152, 0, 0 },{ 156, 0, 0 } },
    { { 165, 0, 0 },{ 171, 0, 0 } },
    { { 0, 5, 5 },{ 0, 7, 1 } },
    { { 0, 10, 15 },{ 0, 9, 15 } },
    { { 0, 12, 15 },{ 0, 15, 12 } },
    { { 148, 0, 0 },{ 153, 0, 0 } },
    { { 159, 0, 0 },{ 127, 0, 0 } },
    { { 0, 2, 5 },{ 0, 5, 2 } },
    { { 176, 0, 0 },{ 133, 0, 0 } },
    { { 147, 0, 0 },{ 151, 0, 0 } },
    { { 130, 0, 0 },{ 135, 0, 0 } },
    { { 174, 0, 0 },{ 131, 0, 0 } },
    { { 142, 0, 0 },{ 166, 0, 0 } },
    { { 0, 5, 3 },{ 0, 4, 4 } },
    { { 0, 14, 15 },{ 0, 15, 14 } },
    { { 0, 1, 15 },{ 0, 15, 0 } },
    { { 158, 0, 0 },{ 134, 0, 0 } },
    { { 0, 11, 15 },{ 0, 15, 11 } },
    { { 150, 0, 0 },{ 155, 0, 0 } },
    { { 143, 0, 0 },{ 136, 0, 0 } },
    { { 137, 0, 0 },{ 144, 0, 0 } },
    { { 0, 1, 5 },{ 173, 0, 0 } },
    { { 145, 0, 0 },{ 167, 0, 0 } },
    { { 0, 1, 6 },{ 0, 6, 1 } },
    { { 0, 3, 6 },{ 0, 6, 3 } },
    { { 146, 0, 0 },{ 161, 0, 0 } },
    { { 224, 0, 0 },{ 181, 0, 0 } },
    { { 190, 0, 0 },{ 0, 11, 2 } },
    { { 183, 0, 0 },{ 182, 0, 0 } },
    { { 180, 0, 0 },{ 188, 0, 0 } },
    { { 195, 0, 0 },{ 214, 0, 0 } },
    { { 189, 0, 0 },{ 210, 0, 0 } },
    { { 0, 4, 7 },{ 0, 7, 4 } },
    { { 0, 2, 10 },{ 0, 10, 2 } },
    { { 0, 2, 9 },{ 0, 6, 7 } },
    { { 191, 0, 0 },{ 184, 0, 0 } },
    { { 0, 8, 6 },{ 0, 7, 7 } },
    { { 0, 3, 8 },{ 0, 8, 3 } },
    { { 193, 0, 0 },{ 211, 0, 0 } },
    { { 196, 0, 0 },{ 213, 0, 0 } },
    { { 0, 8, 2 },{ 0, 1, 8 } },
    { { 228, 0, 0 },{ 220, 0, 0 } },
    { { 204, 0, 0 },{ 207, 0, 0 } },
    { { 0, 10, 1 },{ 0, 6, 8 } },
    { { 0, 6, 6 },{ 0, 2, 8 } },
    { { 0, 0, 15 },{ 199, 0, 0 } },
    { { 186, 0, 0 },{ 212, 0, 0 } },
    { { 0, 11, 4 },{ 229, 0, 0 } },
    { { 0, 8, 1 },{ 205, 0, 0 } },
    { { 0, 4, 9 },{ 0, 9, 4 } },
    { { 206, 0, 0 },{ 223, 0, 0 } },
    { { 215, 0, 0 },{ 198, 0, 0 } },
    { { 203, 0, 0 },{ 192, 0, 0 } },
    { { 0, 5, 6 },{ 0, 6, 5 } },
    { { 0, 3, 9 },{ 0, 9, 3 } },
    { { 179, 0, 0 },{ 187, 0, 0 } },
    { { 185, 0, 0 },{ 197, 0, 0 } },
    { { 0, 0, 6 },{ 0, 6, 0 } },
    { { 0, 5, 8 },{ 0, 8, 5 } },
    { { 0, 11, 3 },{ 0, 8, 8 } },
    { { 0, 1, 7 },{ 218, 0, 0 } },
    { { 222, 0, 0 },{ 217, 0, 0 } },
    { { 226, 0, 0 },{ 0, 8, 7 } },
    { { 0, 1, 9 },{ 0, 9, 1 } },
    { { 0, 9, 6 },{ 0, 10, 4 } },
    { { 221, 0, 0 },{ 208, 0, 0 } },
    { { 219, 0, 0 },{ 178, 0, 0 } },
    { { 225, 0, 0 },{ 200, 0, 0 } },
    { { 0, 3, 10 },{ 0, 10, 3 } },
    { { 0, 7, 6 },{ 0, 9, 2 } },
    { { 201, 0, 0 },{ 216, 0, 0 } },
    { { 202, 0, 0 },{ 209, 0, 0 } },
    { { 0, 4, 8 },{ 0, 8, 4 } },
    { { 0, 0, 5 },{ 0, 5, 0 } },
    { { 227, 0, 0 },{ 194, 0, 0 } },
    { { 0, 5, 7 },{ 0, 7, 5 } },
    { { 0, 5, 9 },{ 0, 9, 5 } },
    { { 0, 3, 7 },{ 0, 2, 7 } },
    { { 0, 8, 11 },{ 0, 11, 8 } },
    { { 0, 8, 12 },{ 0, 12, 8 } },
    { { 0, 10, 8 },{ 0, 9, 9 } },
    { { 246, 0, 0 },{ 0, 14, 6 } },
    { { 253, 0, 0 },{ 0, 1, 10 } },
    { { 251, 0, 0 },{ 0, 3, 11 } },
    { { 0, 12, 5 },{ 0, 8, 10 } },
    { { 0, 12, 2 },{ 0, 5, 11 } },
    { { 0, 6, 13 },{ 0, 13, 6 } },
    { { 247, 0, 0 },{ 0, 3, 14 } },
    { { 0, 4, 12 },{ 0, 12, 4 } },
    { { 236, 0, 0 },{ 239, 0, 0 } },
    { { 0, 2, 11 },{ 0, 5, 10 } },
    { { 0, 13, 1 },{ 0, 5, 12 } },
    { { 0, 10, 7 },{ 0, 2, 12 } },
    { { 0, 8, 9 },{ 0, 9, 8 } },
    { { 240, 0, 0 },{ 238, 0, 0 } },
    { { 0, 13, 2 },{ 0, 1, 13 } },
    { { 237, 0, 0 },{ 0, 12, 9 } },
    { { 0, 11, 5 },{ 0, 1, 12 } },
    { { 231, 0, 0 },{ 0, 9, 0 } },
    { { 252, 0, 0 },{ 230, 0, 0 } },
    { { 242, 0, 0 },{ 244, 0, 0 } },
    { { 0, 10, 5 },{ 0, 1, 11 } },
    { { 0, 12, 6 },{ 0, 3, 13 } },
    { { 0, 12, 3 },{ 0, 7, 10 } },
    { { 0, 14, 1 },{ 0, 5, 13 } },
    { { 0, 0, 8 },{ 0, 8, 0 } },
    { { 0, 14, 5 },{ 248, 0, 0 } },
    { { 0, 13, 5 },{ 0, 7, 12 } },
    { { 0, 10, 9 },{ 0, 6, 12 } },
    { { 0, 13, 3 },{ 0, 2, 13 } },
    { { 243, 0, 0 },{ 232, 0, 0 } },
    { { 0, 12, 1 },{ 0, 4, 11 } },
    { { 0, 14, 3 },{ 0, 9, 11 } },
    { { 0, 5, 14 },{ 0, 11, 10 } },
    { { 0, 7, 11 },{ 0, 11, 7 } },
    { { 0, 7, 9 },{ 0, 9, 7 } },
    { { 0, 11, 1 },{ 0, 6, 9 } },
    { { 0, 14, 2 },{ 0, 1, 14 } },
    { { 0, 0, 7 },{ 0, 7, 0 } },
    { { 0, 12, 7 },{ 0, 4, 13 } },
    { { 245, 0, 0 },{ 0, 3, 12 } },
    { { 0, 13, 4 },{ 0, 9, 10 } },
    { { 0, 11, 9 },{ 0, 10, 10 } },
    { { 0, 13, 7 },{ 0, 14, 4 } },
    { { 233, 0, 0 },{ 234, 0, 0 } },
    { { 235, 0, 0 },{ 249, 0, 0 } },
    { { 0, 4, 10 },{ 0, 7, 8 } },
    { { 250, 0, 0 },{ 241, 0, 0 } },
    { { 0, 6, 11 },{ 0, 11, 6 } },
    { { 0, 6, 10 },{ 0, 10, 6 } },
    { { 0, 14, 13 },{ 0, 12, 14 } },
    { { 0, 10, 0 },{ 0, 0, 9 } },
    { { 0, 14, 7 },{ 0, 10, 12 } },
    { { 0, 12, 10 },{ 0, 11, 11 } },
    { { 0, 8, 13 },{ 0, 13, 8 } },
    { { 0, 14, 12 },{ 0, 13, 13 } },
    { { 0, 12, 11 },{ 0, 8, 14 } },
    { { 0, 6, 14 },{ 0, 9, 12 } },
    { { 0, 13, 10 },{ 0, 11, 12 } },
    { { 0, 14, 8 },{ 0, 9, 13 } },
    { { 0, 14, 9 },{ 0, 10, 13 } },
    { { 0, 12, 12 },{ 0, 9, 14 } },
    { { 0, 12, 13 },{ 0, 13, 12 } },
    { { 0, 13, 9 },{ 0, 7, 14 } },
    { { 0, 10, 14 },{ 0, 14, 10 } },
    { { 0, 13, 0 },{ 0, 0, 12 } },
    { { 254, 0, 0 },{ 0, 0, 13 } },
    { { 0, 4, 14 },{ 0, 2, 14 } },
    { { 0, 10, 11 },{ 0, 7, 13 } },
    { { 0, 11, 14 },{ 0, 14, 11 } },
    { { 0, 11, 13 },{ 0, 13, 11 } },
    { { 0, 12, 0 },{ 0, 0, 11 } },
    { { 0, 14, 14 },{ 0, 13, 14 } },
    { { 0, 11, 0 },{ 0, 0, 10 } },
    { { 0, 0, 14 },{ 0, 14, 0 } },
  };


static const SHuffmanTableLook TableLook[] =
  {
    {g_HuffmanTable0,  0},
    {g_HuffmanTable1,  0},
    {g_HuffmanTable2,  0},
    {g_HuffmanTable3,  0},
    {g_HuffmanTable0,  0},
    {g_HuffmanTable5,  0},
    {g_HuffmanTable6,  0},
    {g_HuffmanTable7,  0},
    {g_HuffmanTable8,  0},
    {g_HuffmanTable9,  0},
    {g_HuffmanTable10, 0},
    {g_HuffmanTable11, 0},
    {g_HuffmanTable12, 0},
    {g_HuffmanTable13, 0},
    {g_HuffmanTable0,  0},
    {g_HuffmanTable15, 0},
    {g_HuffmanTable16, 1},
    {g_HuffmanTable16, 2},
    {g_HuffmanTable16, 3},
    {g_HuffmanTable16, 4},
    {g_HuffmanTable16, 6},
    {g_HuffmanTable16, 8},
    {g_HuffmanTable16,10},
    {g_HuffmanTable16,13},
    {g_HuffmanTable24, 4},
    {g_HuffmanTable24, 5},
    {g_HuffmanTable24, 6},
    {g_HuffmanTable24, 7},
    {g_HuffmanTable24, 8},
    {g_HuffmanTable24, 9},
    {g_HuffmanTable24,11},
    {g_HuffmanTable24,13},
  };


inline static void LookupHuffman( int nTable, CBitStream* pbs, int* xy )
{
  const SHuffmanTable (* const t)[2] = TableLook[nTable].pTable;
  int nLinbits = TableLook[nTable].nLinbits;
  int* x = xy;
  int* y = xy+1;
    
  // Lookup in Huffman table.
  register Int16 point0 = 0;
  register Int16 bit = 0;
  register Int16 point;
  do {
    point = point0;
    bit = pbs->Get1Bit();
    point0 = t[point][bit].ptr;
  } while( point0>0 );
    
  *x = t[point][bit].x;
  *y = t[point][bit].y;

  if( nLinbits>0 && *x==15 )
    *x += pbs->GetBits(nLinbits);

  if( *x>0 && pbs->Get1Bit()!=0 )
    *x = -*x;

  if( nLinbits>0 && *y==15 )
    *y += pbs->GetBits(nLinbits);

  if( *y>0 && pbs->Get1Bit()!=0 )
    *y = -*y;
}

inline static void LookupHuffmanQuad( int nTable, CBitStream* pbs, int* vwxy )
{
  const SHuffmanTableQuad (* const t)[2] = TableLookQuad[nTable].pTable;
  int* v = vwxy;
  int* w = vwxy+1;
  int* x = vwxy+2;
  int* y = vwxy+3;
    
  // Lookup in Huffman table.
  register Int16 point0 = 0;
  register Int16 bit = 0;
  register Int16 point;
  do {
    point = point0;
    bit = pbs->Get1Bit();
    point0 = t[point][bit].ptr;
  } while( point0>0 );
    
  *v = t[point][bit].v;
  *w = t[point][bit].w;
  *x = t[point][bit].x;
  *y = t[point][bit].y;

  if( *v>0 && pbs->Get1Bit()!=0 )
    *v = -*v;

  if( *w>0 && pbs->Get1Bit()!=0 )
    *w = -*w;

  if( *x>0 && pbs->Get1Bit()!=0 )
    *x = -*x;

  if( *y>0 && pbs->Get1Bit()!=0 )
    *y = -*y;
}

bool CMpegDecoder::DecodeHuffmanCode( int is[576] )
{
  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];
  int* pnSfbIndex = 
    g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nLongBlock;


  int nIndex = 0;
  //---------------------------------------------
  // BigValue領域の読み込みとデコード
  //---------------------------------------------
  int nRegion1Start, nRegion2Start;

  if( pgi->nBlockType==0 ){
    nRegion1Start = pnSfbIndex[pgi->nRegion0Count+1];
    nRegion2Start = pnSfbIndex[pgi->nRegion0Count+pgi->nRegion1Count+2];
  }
  else{
    nRegion1Start = 36;
    nRegion2Start = 576;
  }

  for( ; nIndex<=576-2 && nIndex<pgi->nBigValues*2; nIndex+=2 ){
    if( m_bs.IsOverrun() ){
      m_nLastError = ERROR_BITOVERRUN;
      return false;
    }

    int nTable;
    if( nIndex<nRegion1Start ){
      //Region 0
      nTable = pgi->nTableSelect[0];
    }
    else if( nIndex<nRegion2Start){
      //Region 1
      nTable = pgi->nTableSelect[1];
    }
    else{
      //Region 2
      nTable =  pgi->nTableSelect[2];
    }

    LookupHuffman( nTable, &m_bs, &is[nIndex] );
  }

  //---------------------------------------------
  // Count1領域の読み込みとデコード
  //---------------------------------------------
  for( ; nIndex<=576-4 && m_bs.GetDataBitCount()<pgi->nPart23Length; nIndex+=4 ){
    if( m_bs.IsOverrun() ){
      m_nLastError = ERROR_BITOVERRUN;
      return false;
    }

    LookupHuffmanQuad( pgi->nCount1TableSelect, &m_bs, &is[nIndex] );
  }

  //---------------------------------------------
  // 576サンプルに満たない部分は値0となる
  //---------------------------------------------
  for (; nIndex<576; nIndex++){
    is[nIndex] = 0;
  }

  return true;
}

/*******************ハフマン符号終了***********************/

static const int g_nPreEmphasisTable[] = 
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 0 };

void CMpegDecoder::CreateSampleMap( const SScalefactor* psf, SSampleMap* pSampleMap )
{
  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];

  int nIndex = 0;

  if( pgi->IsShortBlock() ){
    ////////////////////////////////////////////////////////
    // Short Block
    ////////////////////////////////////////////////////////
    int* pnScfbIndex = 
      g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nShortBlock;

    for( int nScalefactorBand=0; nScalefactorBand<13; nScalefactorBand++ ){
      int nIndexStart = nIndex;
      for( int nSubblock=0; nSubblock<3; nSubblock++ ){
	int nCriticalBandWidth = 
	  pnScfbIndex[nScalefactorBand+1]-pnScfbIndex[nScalefactorBand];
	for( int i=0; i<nCriticalBandWidth; i++ ){
	  pSampleMap[nIndex].nBlockType = BLOCK_SHORT;
	  pSampleMap[nIndex].nSubblock = nSubblock;
	  pSampleMap[nIndex].fScale = 
	    0.5*(pgi->nScalefacScale+1.0)
	    *psf->nShortBlock[nSubblock][nScalefactorBand];
	  pSampleMap[nIndex].nOrderIndex = 
	    3*((nIndex-nIndexStart)%nCriticalBandWidth)
	    +(nIndex-nIndexStart)/nCriticalBandWidth+nIndexStart;
	  nIndex++;
	}
      }
    }
  }
  else if( pgi->IsLongBlock() ){
    ////////////////////////////////////////////////////////
    // Long Block
    ////////////////////////////////////////////////////////
    int* pnScfbIndex 
      = g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nLongBlock;

    int nScalefactorBand = 0;
    for( int i=0; i<576; i++ ){
      pSampleMap[nIndex].nBlockType = BLOCK_LONG;
      pSampleMap[nIndex].nSubblock = 0;
      pSampleMap[nIndex].nOrderIndex = nIndex;
      if( nIndex>=pnScfbIndex[nScalefactorBand+1] ){
	nScalefactorBand++;
      }

      int nScalefactor = psf->nLongBlock[nScalefactorBand];
      if( pgi->nPreFlag ){
	nScalefactor += g_nPreEmphasisTable[nScalefactorBand];
      }
      pSampleMap[nIndex].fScale = 
	0.5 * (pgi->nScalefacScale+1.0) * nScalefactor;
      nIndex++;
    }
  }
  else {
    ////////////////////////////////////////////////////////
    // Mixed Block
    ////////////////////////////////////////////////////////
    //Long Block Sample
    int* pnScfbIndex = 
      g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nLongBlock;
    int nScalefactorBand = 0;
    for( int i=0; i<36; i++ ){
      pSampleMap[nIndex].nBlockType = BLOCK_LONG;
      pSampleMap[nIndex].nSubblock = 0;
      pSampleMap[nIndex].nOrderIndex = nIndex;
      if( nIndex>=pnScfbIndex[nScalefactorBand+1] ){
	nScalefactorBand++;
      }

      int nScalefactor = psf->nLongBlock[nScalefactorBand];
      if( pgi->nPreFlag ){
	nScalefactor += g_nPreEmphasisTable[nScalefactorBand];
      }
      pSampleMap[nIndex].fScale = 
	0.5 * (pgi->nScalefacScale+1.0) * nScalefactor;
      nIndex++;
    }

    //Short Block Sample
    pnScfbIndex = 
      g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nShortBlock;

    for( nScalefactorBand=3; nScalefactorBand<13; nScalefactorBand++ ){
      int nIndexStart = nIndex;
      for( int nSubblock=0; nSubblock<3; nSubblock++ ){
	int nCriticalBandWidth = 
	  pnScfbIndex[nScalefactorBand+1]-pnScfbIndex[nScalefactorBand];
	for( int i=0; i<nCriticalBandWidth; i++ ){
	  pSampleMap[nIndex].nBlockType = BLOCK_SHORT;
	  pSampleMap[nIndex].nSubblock = nSubblock;
	  int nScalefactor = psf->nShortBlock[nSubblock][nScalefactorBand];
	  pSampleMap[nIndex].fScale = 
	    0.5 * (pgi->nScalefacScale+1.0) * nScalefactor;

	  pSampleMap[nIndex].nOrderIndex = 
	    3*((nIndex-nIndexStart)%nCriticalBandWidth)
	    +(nIndex-nIndexStart)/nCriticalBandWidth+nIndexStart;
	  nIndex++;
	}
      }
    }
  }
}

void CMpegDecoder::Dequantize( const SSampleMap* pSampleMap, const int is[], double xr[] )
{
  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];

  double fGain = 0.25 * (pgi->nGlobalGain-210.0);
  for( int i=0; i<576; i++ ){
    if( pSampleMap[i].nBlockType==BLOCK_SHORT ){
      fGain -= -2.0 * pgi->nSubblockGain[pSampleMap[i].nSubblock];
    }

    xr[i] = is[i] * pow(fabs(is[i]), 1.0/3.0) * pow(2.0, fGain-pSampleMap[i].fScale);
  }
}

void CMpegDecoder::Reorder( const SSampleMap* pSampleMap, double xr[576] )
{
  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];

  static double buf[576];

  if( pgi->IsLongBlock() ){
    return;
  }

  for( int i=0; i<576; i++ ){
    buf[pSampleMap[i].nOrderIndex] = xr[i];
  }

  memcpy( xr, buf, sizeof(xr[0])*576 );
}

void CMpegDecoder::JointStereoDecode( const SScalefactor* pScalefactor, double xr[2][576] )
{
  bool bMSStereo = m_pMpegFrame->GetMode()==1 
    && m_pMpegFrame->GetModeExtention() & 0x02; 
  bool bIStereo = m_pMpegFrame->GetMode()==1
    && m_pMpegFrame->GetModeExtention() & 0x01;

  int nISIndex = 576;
  //--------------------------------------------
  //-- Iステレオ処理
  //--------------------------------------------
  if( bIStereo ){
    nISIndex = ProcessIStereo( pScalefactor, xr );
  }

  //--------------------------------------------
  //-- MSステレオ処理
  //--------------------------------------------
  if( bMSStereo ){
    ProcessMSStereo( xr, nISIndex );
  }
}

static bool g_bInitProcessIStereo = false;
static bool g_bInitAntialias = false;
static bool g_bInitImdct = false;
static bool g_bInitSubband = false;
static double g_fRatio[7];

static void InitializeProcessIStereo()
{
  for( int i=0; i<7; i++ ){
    double fRad = (double)i * (M_PI/12.0);
    g_fRatio[i] = sin(fRad)/(sin(fRad)+cos(fRad));
  }
}

static int GetMaxCriticalBandLong( const double x[576], int* pnScfbIndex )
{
  for( int i=575; i>=0; i-- ){
    if( x[i]!=0 ){
      for( int sfb=0; sfb<21; sfb++ ){
	if( x[i]<pnScfbIndex[sfb+1] ){
	  return sfb;
	}
      }

    }
  }

  return -1;
}

static int GetMaxCriticalBandShort( const double x[576], int* pnScfbIndex )
{
  for( int i=575; i>=0; i-- ){
    if( x[i]!=0 ){
      for( int sfb=0; sfb<12; sfb++ ){
	if( x[i]/3.0<pnScfbIndex[sfb+1] ){
	  return sfb;
	}
      }

    }
  }

  return -1;
}

int CMpegDecoder::ProcessIStereo( const SScalefactor* pScalefactor, double x[2][576] )
{
  if( !g_bInitProcessIStereo ){
    InitializeProcessIStereo();
    g_bInitProcessIStereo = true;
  }

  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];
  int nISIndex;

  if( pgi->IsLongBlock() ){
    //-------------------------------------------
    //-- ロングブロック
    //-------------------------------------------
    int* pnScfbIndex = g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nLongBlock;
    int nMaxScalefactorBand = GetMaxCriticalBandLong( x[1], pnScfbIndex );
    if( nMaxScalefactorBand<0 ){
      return 576;
    }
    nISIndex = pnScfbIndex[nMaxScalefactorBand];
        
    for( int nScalefactorBand=nMaxScalefactorBand+1; nScalefactorBand<21; nScalefactorBand++ ){
      //Iステレオでは、Rチャネルの高域のスケールファクターを左右チャネルの強度比率として使用する
      int nPos = pScalefactor->nLongBlock[nScalefactorBand];
      nPos = nPos>6 ? 6 : nPos;

      for( int i=pnScfbIndex[nScalefactorBand]; i<pnScfbIndex[nScalefactorBand+1]; i++){
	x[1][i] = (1.0-g_fRatio[nPos]) * x[0][i];
	x[0][i] = g_fRatio[nPos] * x[0][i];
      }
    }
  }
  else{
    //-------------------------------------------
    //-- ショートブロックまたはミックスブロック
    //-------------------------------------------
    int* pnScfbIndex = g_ScalefactorBandIndex[m_pMpegFrame->GetSamplingFrequency()].nShortBlock;
    int nMaxScalefactorBand = GetMaxCriticalBandShort( x[1], pnScfbIndex );
    if( nMaxScalefactorBand<0 ){
      return 576;
    }
    nISIndex = pnScfbIndex[nMaxScalefactorBand];

    for( int nScalefactorBand=nMaxScalefactorBand+1; nScalefactorBand<12; nScalefactorBand++ ){
      for( int nSubblock=0; nSubblock<3; nSubblock++ ){
	//Iステレオでは、Rチャネルの高域のスケールファクターを左右チャネルの強度比率として使用する
	int nPos = pScalefactor->nShortBlock[nSubblock][nScalefactorBand];
	nPos = nPos>6 ? 6 : nPos;

	for( int y=pnScfbIndex[nScalefactorBand]; y<pnScfbIndex[nScalefactorBand+1]; y++){
	  int i = y*3 + nSubblock;
	  x[1][i] = (1.0-g_fRatio[nPos]) * x[0][i];
	  x[0][i] = g_fRatio[nPos] * x[0][i];
	}
      }
    }
  }

  return nISIndex;
}

void CMpegDecoder::ProcessMSStereo(double x[2][576], int nISIndex )
{
  for( int i=0; i<nISIndex; i++ ){
    double l = (x[0][i] + x[1][i]) / 1.41421356;
    double r = (x[0][i] - x[1][i]) / 1.41421356;
    x[0][i] = l;
    x[1][i] = r;
  }
}

static double g_cs[8];
static double g_ca[8];
static double g_fSineWindow[4][36];
static double g_fCos[64][32];

static void InitializeAntialias()
{
  double fCi[8] =
    { -0.6, -0.535, -0.33, -0.185, -0.095, -0.041, -0.0142, -0.0037 };

  for( int i=0; i<8; i++ ){
    double sq = sqrt(1.0 + fCi[i]*fCi[i]);
    g_cs[i] = 1.0 / sq;
    g_ca[i] = fCi[i] / sq;
  }
}

void CMpegDecoder::Antialias( double lr[] )
{
  if( !g_bInitAntialias ){
    InitializeAntialias();
    g_bInitAntialias = true;
  }

  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];

  if( pgi->IsShortBlock() ){
    return;
  }

  int n1;
  if( pgi->IsLongBlock() ){
    n1 = 31;
  }
  else { //MixedBloxk
    n1 = 1;
  }

  for( int k=0; k<n1; k++ ){
    double* p = &lr[k*18];
    for( int i=0; i<8; i++ ){
      double a0 = p[18+i];
      double b0 = p[17-i];
      p[18+i] = a0*g_cs[i] + b0*g_ca[i];
      p[17-i] = b0*g_cs[i] - a0*g_ca[i];
    }
  }
}

static void InitializeImdctSynthesys()
{
  int i;

  //--------------------------------------------------
  // IMDCT用窓関数を生成する
  //--------------------------------------------------

  // ロングブロック　タイプ0
  for ( i=0; i<36; i++)
    g_fSineWindow[0][i] = sin(M_PI/36.0*(i+0.5));

  // ロングブロック　タイプ1
  for( i=0; i<18; i++ )
    g_fSineWindow[1][i] = sin(M_PI/36.0*(i+0.5));

  for( i=18; i<24; i++ )
    g_fSineWindow[1][i] = 1.0;

  for( i=24; i<30; i++ )
    g_fSineWindow[1][i] = sin(M_PI/12.0*(i+0.5-18));

  for( i=30; i<36; i++ )
    g_fSineWindow[1][i] = 0.0;

  // ロングブロック　タイプ3
  for( i=0; i<6; i++)
    g_fSineWindow[3][i] = 0.0;

  for( i=6; i<12; i++ )
    g_fSineWindow[3][i] = sin(M_PI/12.0*(i+0.5-6));

  for( i=12; i<18; i++ )
    g_fSineWindow[3][i] = 1.0;

  for( i=18; i<36; i++ )
    g_fSineWindow[3][i] = sin(M_PI/36.0*(i+0.5));


  // ショートブロック（タイプ2）
  for( i=0; i<12; i++ )
    g_fSineWindow[2][i] = sin(M_PI/12.0*(i+0.5));

  for( i=12; i<36; i++ )
    g_fSineWindow[2][i] = 0.0F;
}

void CMpegDecoder::ImdctSynthesys( const double lr[576], double pfb[576] )
{
  if( !g_bInitImdct ){
    InitializeImdctSynthesys();
    g_bInitImdct = true;
  }

  const SGranuleInfo* pgi = &m_pMpegFrame->m_GranuleInfo[m_nChannel][m_nGranule];
  int nLongSubbandNum = 0;
  int nWindowTypeLong = 0;

  if( pgi->IsLongBlock() ){
    nLongSubbandNum = 32;
    switch( pgi->nBlockType ){
    case 0:    nWindowTypeLong = 0; break;
    case 1:    nWindowTypeLong = 1; break;
    case 3:    nWindowTypeLong = 3; break;
    }
  }
  else if( pgi->IsShortBlock() ){
    nLongSubbandNum = 0;
    nWindowTypeLong = -1; //未使用
  }
  else if( pgi->IsMixedBlock() ){
    nLongSubbandNum = 2;
    nWindowTypeLong = 0;
  }

  int nSubband;
  int nIndex = 0;

  int i, j;
  /////////////////////////////////////////////////////////
  // ロングブロック（含ミックスブロック）
  /////////////////////////////////////////////////////////
  for( nSubband=0; nSubband<nLongSubbandNum; nSubband++ ){
    //18サンプル逆MDCTと窓関数適用
    double fRawout[36];
    for( i=0; i<36; i++){
      double fSum = 0.0;
      for( j=0; j<18; j++ ){
	fSum += lr[j+nSubband*18] 
	  * cos( M_PI/72.0*(2.0*i+19.0)*(2.0*j+1.0) );
      }
      fRawout[i] = fSum * g_fSineWindow[nWindowTypeLong][i];
    }

    //前のグラニュールとの統合と保存
    for( int ss=0; ss<18; ss++){
      //結果の前半18は前のグラニュールと重ね合わせて呼び出し元へ返す
      pfb[nIndex] = fRawout[ss] + m_fImdctPrevRawout[m_nChannel][nIndex];

      //結果の後半18は次のグラニュールのために保存する
      m_fImdctPrevRawout[m_nChannel][nIndex] = fRawout[ss+18];
      nIndex++;
    }
  }

  /////////////////////////////////////////////////////////
  // ショートブロック（含ミックスブロック）
  /////////////////////////////////////////////////////////
  for(; nSubband<32; nSubband++ ){
    double fRawout[36];
    memset(fRawout, 0, sizeof(fRawout));

    for( int nSubblock=0; nSubblock<3; nSubblock++ ){
      double fRawoutTemp[12];

      //6サンプル逆MDCT×3と窓関数適用
      for( i=0; i<12; i++){
	double fSum = 0;
	for( int j=0; j<6; j++ ){
	  fSum += lr[nSubband*18+j*3+nSubblock] 
	    * cos( M_PI/24.0*(2.0*i+7.0)*(2.0*j+1.0) );
	}
	fRawoutTemp[i] = fSum * g_fSineWindow[2][i];
      }

      //サブブロックの重ね合わせ
      for( i=0; i<12; i++){
	fRawout[6*nSubblock+i+6] += fRawoutTemp[i];
      }
    }

    //前のグラニュールとの統合と保存
    for( int ss=0; ss<18; ss++){
      //結果の前半は前のグラニュールと重ね合わせて呼び出し元へ返す
      pfb[nIndex] = fRawout[ss] + m_fImdctPrevRawout[m_nChannel][nIndex];

      //結果の後半は次のグラニュールのために保存する
      m_fImdctPrevRawout[m_nChannel][nIndex] = fRawout[ss+18];
      nIndex++;
    }
  }
}

static void InitializeSubbandSynthesys()
{
  for( int i=0; i<64; i++ ){
    for( int j=0; j<32; j++ ){
      g_fCos[i][j] = cos( (2.0*j+1.0)*(i+16.0)*M_PI/64.0 );
      // ## Debug
      // std::cout << "g_fCos["<<i<<"]["<<j<<"]  = " << g_fCos[i][j] << "\n" << std::flush;
      // ## end of Debug
    }
  }
}

static double g_fPolyphaseCoefs[8][64] = 
  {
    { 0.00000000, -1.5259e-5, -1.5259e-5, -1.5259e-5,
      -1.5259e-5, -1.5259e-5, -1.5259e-5, -3.0518e-5,
      -3.0518e-5, -3.0518e-5, -3.0518e-5, -4.5776e-5,
      -4.5766e-5, -6.1035e-5, -6.1035e-5, -7.6294e-5,
      -0.000076294, -0.000091553, -0.000106812, -0.000106812,
      -0.000122070, -0.000137329, -0.000152588, -0.000167847,
      -0.000198364, -0.000213623, -0.000244141, -0.000259399,
      -0.000289917, -0.000320435, -0.000366211,	-0.000396729,
      -0.000442505, -0.000473022, -0.000534058,	-0.000579834,
      -0.000625610, -0.000686646, -0.000747681,	-0.000808716,
      -0.000885010, -0.000961304, -0.001037598,	-0.001113892,
      -0.001205444, -0.001296997, -0.001388550,	-0.001480103,
      -0.001586914, -0.001693726, -0.001785278,	-0.001907349,
      -0.002014160, -0.002120972, -0.002243042,	-0.002349854,
      -0.002456665, -0.002578735, -0.002685547,	-0.002792358,
      -0.002899170, -0.002990723, -0.003082275,	-0.003173828 },

    { 0.003250122, 0.003326416,	0.003387451, 0.003433228,
      0.003463745, 0.003479004,	0.003479004, 0.003463745,
      0.003417969, 0.003372192,	0.003280640, 0.003173828,
      0.003051758, 0.002883911,	0.002700806, 0.002487183,
      0.002227783, 0.001937866,	0.001617432, 0.001266479,
      0.000869751, 0.000442505,	-0.000030518, -0.000549316,
      -0.001098633, -0.001693726, -0.002334595,	-0.003005981,
      -0.003723145, -0.004486084, -0.005294800,	-0.006118774,
      -0.007003784, -0.007919312, -0.008865356,	-0.009841919,
      -0.010848999, -0.011886597, -0.012939453,	-0.014022827,
      -0.015121460, -0.016235352, -0.017349243,	-0.018463135,
      -0.019577026, -0.020690918, -0.021789551,	-0.022857666,
      -0.023910522, -0.024932861, -0.025909424,	-0.026840210,
      -0.027725220, -0.028533936, -0.029281616,	-0.029937744,
      -0.030532837, -0.031005859, -0.031387329,	-0.031661987,
      -0.031814575, -0.031845093, -0.031738281, -0.031478882 },
    
    { 0.031082153, 0.030517578,	0.029785156, 0.028884888,
      0.027801514, 0.026535034,	0.025085449, 0.023422241,
      0.021575928, 0.019531250,	0.017257690, 0.014801025,
      0.012115479, 0.009231567, 0.006134033, 0.002822876,
      -0.000686646, -0.004394531, -0.008316040,	-0.012420654,
      -0.016708374, -0.021179199, -0.025817871,	-0.030609131,
      -0.035552979, -0.040634155, -0.045837402,	-0.051132202,
      -0.056533813, -0.061996460, -0.067520142,	-0.073059082,
      -0.078628540, -0.084182739, -0.089706421,	-0.095169067,
      -0.100540161, -0.105819702, -0.110946655, -0.115921021,
      -0.120697021, -0.125259399, -0.129562378, -0.133590698,
      -0.137298584, -0.140670776, -0.143676758,	-0.146255493,
      -0.148422241, -0.150115967, -0.151306152, -0.151962280,
      -0.152069092, -0.151596069, -0.150497437,	-0.148773193,
      -0.146362305, -0.143264771, -0.139450073, -0.134887695,
      -0.129577637, -0.123474121, -0.116577148, -0.108856201 },

    { 0.100311279, 0.090927124,	0.080688477, 0.069595337,
      0.057617187, 0.044784546, 0.031082153, 0.016510010,
      0.001068115, -0.015228271, -0.032379150, -0.050354004,
      -0.069168091, -0.088775635, -0.109161377,	-0.130310059,
      -0.152206421, -0.174789429, -0.198059082,	-0.221984863,
      -0.246505737, -0.271591187, -0.297210693, -0.323318481,
      -0.349868774, -0.376800537, -0.404083252,	-0.431655884,
      -0.459472656, -0.487472534, -0.515609741,	-0.543823242,
      -0.572036743, -0.600219727, -0.628295898,	-0.656219482,
      -0.683914185, -0.711318970, -0.738372803,	-0.765029907,
      -0.791213989, -0.816864014, -0.841949463, -0.866363525,
      -0.890090942, -0.913055420, -0.935195923,	-0.956481934,
      -0.976852417, -0.996246338, -1.014617920,	-1.031936646,
      -1.048156738, -1.063217163, -1.077117920,	-1.089782715,
      -1.101211548, -1.111373901, -1.120223999,	-1.127746582,
      -1.133926392, -1.138763428, -1.142211914,	-1.144287109 },

    { 1.144989014, 1.144287109, 1.142211914, 1.138763428,
      1.133926392, 1.127746582,	1.120223999, 1.111373901,
      1.101211548, 1.089782715, 1.077117920, 1.063217163,
      1.048156738, 1.031936646, 1.014617920, 0.996246338,
      0.976852417, 0.956481934,	0.935195923, 0.913055420,
      0.890090942, 0.866363525,	0.841949463, 0.816864014,
      0.791213989, 0.765029907,	0.738372803, 0.711318970,
      0.683914185, 0.656219482, 0.628295898, 0.600219727,
      0.572036743, 0.543823242,	0.515609741, 0.487472534,
      0.459472656, 0.431655884,	0.404083252, 0.376800537,
      0.349868774, 0.323318481,	0.297210693, 0.271591187,
      0.246505737, 0.221984863,	0.198059082, 0.174789429,
      0.152206421, 0.130310059,	0.109161377, 0.088775635,
      0.069168091, 0.050354004,	0.032379150, 0.015228271,
      -0.001068115, -0.016510010, -0.031082153,	-0.044784546,
      -0.057617187, -0.069595337, -0.080688477,	-0.090927124 },

    { 0.100311279, 0.108856201,	0.116577148, 0.123474121,
      0.129577637, 0.134887695, 0.139450073, 0.143264771,
      0.146362305, 0.148773193,	0.150497437, 0.151596069,
      0.152069092, 0.151962280, 0.151306152, 0.150115967,
      0.148422241, 0.146255493,	0.143676758, 0.140670776,
      0.137298584, 0.133590698,	0.129562378, 0.125259399,
      0.120697021, 0.115921021,	0.110946655, 0.105819702,
      0.100540161, 0.095169067, 0.089706421, 0.084182739,
      0.078628540, 0.073059082,	0.067520142, 0.061996460,
      0.056533813, 0.051132202,	0.045837402, 0.040634155,
      0.035552979, 0.030609131, 0.025817871, 0.021179199,
      0.016708374, 0.012420654, 0.008316040, 0.004394531,
      0.000686646, -0.002822876, -0.006134033, -0.009231567,
      -0.012115479, -0.014801025, -0.017257690,	-0.019531250,
      -0.021575928, -0.023422241, -0.025085449, -0.026535034,
      -0.027801514, -0.028884888, -0.029785156,	-0.030517578 },

    { 0.031082153, 0.031478882, 0.031738281, 0.031845093,
      0.031814575, 0.031661987, 0.031387329, 0.031005859,
      0.030532837, 0.029937744,	0.029281616, 0.028533936,
      0.027725220, 0.026840210, 0.025909424, 0.024932861,
      0.023910522, 0.022857666,	0.021789551, 0.020690918,
      0.019577026, 0.018463135,	0.017349243, 0.016235352,
      0.015121460, 0.014022827,	0.012939453, 0.011886597,
      0.010848999, 0.009841919,	0.008865356, 0.007919312,
      0.007003784, 0.006118774,	0.005294800, 0.004486084,
      0.003723145, 0.003005981,	0.002334595, 0.001693726,
      0.001098633, 0.000549316, 0.000030518, -0.000442505,
      -0.000869751, -0.001266479, -0.001617432,	-0.001937866,
      -0.002227783, -0.002487183, -0.002700806, -0.002883911,
      -0.003051758, -0.003173828, -0.003280640,	-0.003372192,
      -0.003417969, -0.003463745, -0.003479004,	-0.003479004,
      -0.003463745, -0.003433228, -0.003387451,	-0.003326416 },

    { 0.003250122, 0.003173828, 0.003082275, 0.002990723,
      0.002899170, 0.002792358,	0.002685547, 0.002578735,
      0.002456665, 0.002349854, 0.002243042, 0.002120972,
      0.002014160, 0.001907349,	0.001785278, 0.001693726,
      0.001586914, 0.001480103,	0.001388550, 0.001296997,
      0.001205444, 0.001113892, 0.001037598, 0.000961304,
      0.000885010, 0.000808716, 0.000747681, 0.000686646,
      0.000625610, 0.000579834,	0.000534058, 0.000473022,
      0.000442505, 0.000396729, 0.000366211, 0.000320435,
      0.000289917, 0.000259399, 0.000244141, 0.000213623,
      0.000198364, 0.000167847,	0.000152588, 0.000137329,
      0.000122070, 0.000106812,	0.000106812, 0.000091553,
      0.000076294, 0.000076294, 0.000061035, 0.000061035,
      0.000045776, 0.000045776, 0.000030518, 0.000030518,
      0.000030518, 0.000030518,	0.000015259, 0.000015259,
      0.000015259, 0.000015259,	0.000015259, 0.000015259 } 
  };

void CMpegDecoder::SubbandSynthesys( const double pfb[576], double pfbOut[576] )
{
  if( !g_bInitSubband ){
    InitializeSubbandSynthesys();
    g_bInitSubband = true;
  }

  //変数名が長いので付け替える
  double (*pfBuf)[64] = (double(*)[64])m_fSubbandBuf[m_nChannel];
  int *pnIndex = &m_nSubbandBufIndex[m_nChannel];
  
  int i, j;
  for( int ss=0; ss<18; ss++ ){
    ///////////////////////////////////////////////////////////////////
    /// 畳み込み演算（32データを時間領域に変換）
    ///////////////////////////////////////////////////////////////////
    for( i=0; i<64; i++){
      double fSum = 0.0;
      for( int j=0; j<32; j++ ){
	double fSig = (ss%2==1 && j%2==1) ? -1.0 : 1.0;
	fSum += fSig * pfb[ss+j*18] * g_fCos[i][j];
	//g_fCos[i][j] : cos( (2.0*j+1.0)*(i+16.0)*M_PI/64 );
      }
     //  // ## Debug
//       std::cout << "fSum = " << fSum << "\r" << std::flush;
//       // ## end of Debug
      pfBuf[*pnIndex][i] = fSum;
    }
        
    ///////////////////////////////////////////////////////////////////
    /// 16組データの重ね合わせ
    ///////////////////////////////////////////////////////////////////
    for( i=0; i<32; i++){
      double fSum = 0.0;

      // ポリフェーズフィルターバンク係数の適用
      for( j=0; j<16; j++ ){
	int nOffset = (j%2)==0? 0 : 32;
	fSum += g_fPolyphaseCoefs[j/2][nOffset+i] * pfBuf[(*pnIndex+16-j)%16][nOffset+i];
      }

      pfbOut[ss*32+i] = fSum;
    }

    *pnIndex = (*pnIndex+1) % 16;
  }
}

int CMpegDecoder::CreatePcm( const double pfbOut[2][576], Int16* pcm )
{
  int clip = 0;
  int nPcmIndex = 0;
    
  for( int i=0; i<576; i++ ){
    for( int ch=0; ch<m_pMpegFrame->GetChannels(); ch++ ){
      Int32 lOut = (Int32)(pfbOut[ch][i] * 32768L);
      
      if( lOut>32767L ){
	pcm[nPcmIndex++] = 32767;
	++clip;
      }
      else if( lOut<-32768L ){
	pcm[nPcmIndex++] = -32768;
	++clip;
      }
      else{
	pcm[nPcmIndex++] = (Int16)lOut;
      }
    }
  }

  return clip;
}
